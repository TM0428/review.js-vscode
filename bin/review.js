var PEG = (function() {
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      function stringEscape(s) {
        function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

        return s
          .replace(/\\/g,   '\\\\')
          .replace(/"/g,    '\\"')
          .replace(/\x08/g, '\\b')
          .replace(/\t/g,   '\\t')
          .replace(/\n/g,   '\\n')
          .replace(/\f/g,   '\\f')
          .replace(/\r/g,   '\\r')
          .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
          .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
          .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
          .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
      }

      var expectedDesc, foundDesc;

      switch (expected.length) {
        case 0:
          expectedDesc = "end of input";
          break;

        case 1:
          expectedDesc = expected[0];
          break;

        default:
          expectedDesc = expected.slice(0, -1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }

      foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

      return "Expected " + expectedDesc + " but " + foundDesc + " found.";
    }

    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
    this.message  = buildMessage(expected, found);
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$startRuleFunctions = { Start: peg$parseStart },
        peg$startRuleFunction  = peg$parseStart,

        peg$c0 = "start",
        peg$c1 = null,
        peg$c2 = "",
        peg$c3 = function(c) {
        			return {
        				line: line(),
        				column: column(),
        				offset: offset(),
        				endPos: peg$currPos,
        				syntax: "Start",
        				content: c
        			};
        		},
        peg$c4 = "chapters",
        peg$c5 = function(c, cc) {
        			var processed = [c];
        			if (cc !== "") {
        				if (Array.isArray(cc.content)) {
        					cc.content.forEach(function (c) {
        						processed.push(c);
        					});
        				} else {
        					processed.push(cc.content);
        				}
        			}
        			return {
        				line: line(),
        				column: column(),
        				offset: offset(),
        				endPos: peg$currPos,
        				syntax: "Chapters",
        				content: processed
        			};
        		},
        peg$c6 = "chapter",
        peg$c7 = function(headline, text) {
        				return {
        					syntax: "Chapter",
        					line: line(),
        					column: column(),
        					offset: offset(),
        					endPos: peg$currPos,
        					headline: headline,
        					text: text
        				};
        			},
        peg$c8 = "headline",
        peg$c9 = [],
        peg$c10 = "=",
        peg$c11 = "\"=\"",
        peg$c12 = function(level, cmd, label, caption) {
        				return {
        					syntax: "Headline",
        					line: line(),
        					column: column(),
        					offset: offset(),
        					endPos: peg$currPos,
        					level: level.length,
        					cmd: cmd,
        					label: label,
        					caption: caption
        				};
        			},
        peg$c13 = "paragraphs",
        peg$c14 = function(c, cc) {
        			var processed = [c];
        			if (cc !== "") {
        				if (Array.isArray(cc.content)) {
        					cc.content.forEach(function (c) {
        						processed.push(c);
        					});
        				} else {
        					processed.push(cc.content);
        				}
        			}
        			return {
        				line: line(),
        				column: column(),
        				offset: offset(),
        				endPos: peg$currPos,
        				syntax: "Paragraphs",
        				content: processed
        			};
        		},
        peg$c15 = "paragraph",
        peg$c16 = function(c) {
        			return {
        				line: line(),
        				column: column(),
        				offset: offset(),
        				endPos: peg$currPos,
        				syntax: "Paragraph",
        				content: c
        			};
        		},
        peg$c17 = "contents",
        peg$c18 = "any character",
        peg$c19 = function(c, cc) {
        			var processed = [c];
        			if (cc !== "") {
        				if (Array.isArray(cc.content)) {
        					cc.content.forEach(function (c) {
        						processed.push(c);
        					});
        				} else {
        					processed.push(cc.content);
        				}
        			}
        			return {
        				line: line(),
        				column: column(),
        				offset: offset(),
        				endPos: peg$currPos,
        				syntax: "Contents",
        				content: processed
        			};
        		},
        peg$c20 = "content",
        peg$c21 = function(c) {
        			return {
        				line: line(),
        				column: column(),
        				offset: offset(),
        				endPos: peg$currPos,
        				syntax: "Content",
        				content: c
        			};
        		},
        peg$c22 = "text of content",
        peg$c23 = /^[^\r\n]/,
        peg$c24 = "[^\\r\\n]",
        peg$c25 = function(text) {
        			return {
        				line: line(),
        				column: column(),
        				offset: offset(),
        				endPos: peg$currPos,
        				syntax: "ContentText",
        				text: text
        			};
        		},
        peg$c26 = "block element",
        peg$c27 = "//",
        peg$c28 = "\"//\"",
        peg$c29 = "{",
        peg$c30 = "\"{\"",
        peg$c31 = "//}",
        peg$c32 = "\"//}\"",
        peg$c33 = function(symbol, args, contents) {
        					return {
        						syntax: "BlockElement",
        						line: line(),
        						column: column(),
        						offset: offset(),
        						endPos: peg$currPos,
        						symbol: symbol,
        						args: args,
        						content: contents
        					};
        				},
        peg$c34 = function(symbol, args) {
        					return {
        						syntax: "BlockElement",
        						line: line(),
        						column: column(),
        						offset: offset(),
        						endPos: peg$currPos,
        						symbol: symbol,
        						args: args,
        						content: []
        					};
        				},
        peg$c35 = "inline element",
        peg$c36 = "@<",
        peg$c37 = "\"@<\"",
        peg$c38 = /^[^>\r\n]/,
        peg$c39 = "[^>\\r\\n]",
        peg$c40 = ">",
        peg$c41 = "\">\"",
        peg$c42 = "}",
        peg$c43 = "\"}\"",
        peg$c44 = function(symbol, contents) {
        				return {
        					syntax: "InlineElement",
        					line: line(),
        					column: column(),
        					offset: offset(),
        					endPos: peg$currPos,
        					symbol: symbol,
        					content: contents
        				};
        			},
        peg$c45 = "bracket argument",
        peg$c46 = "[",
        peg$c47 = "\"[\"",
        peg$c48 = /^[^\n\]]/,
        peg$c49 = "[^\\n\\]]",
        peg$c50 = "]",
        peg$c51 = "\"]\"",
        peg$c52 = function(arg) {
        				return {
        					syntax: "BracketArg",
        					line: line(),
        					column: column(),
        					offset: offset(),
        					endPos: peg$currPos,
        					arg: arg
        				};
        			},
        peg$c53 = "brace argument",
        peg$c54 = /^[^\n}]/,
        peg$c55 = "[^\\n}]",
        peg$c56 = function(arg) {
        				return {
        					syntax: "BraceArg",
        					line: line(),
        					column: column(),
        					offset: offset(),
        					endPos: peg$currPos,
        					arg: arg
        				};
        			},
        peg$c57 = "contents of block element",
        peg$c58 = function(c, cc) {
        			var processed = [c];
        			if (cc !== "") {
        				if (Array.isArray(cc.content)) {
        					cc.content.forEach(function (c) {
        						processed.push(c);
        					});
        				} else {
        					processed.push(cc.content);
        				}
        			}
        			return {
        				line: line(),
        				column: column(),
        				offset: offset(),
        				endPos: peg$currPos,
        				syntax: "BlockElementContents",
        				content: processed
        			};
        		},
        peg$c59 = "content of block element",
        peg$c60 = function(c) {
        			return {
        				line: line(),
        				column: column(),
        				offset: offset(),
        				endPos: peg$currPos,
        				syntax: "BlockElementContent",
        				content: c
        			};
        		},
        peg$c61 = "text of block element",
        peg$c62 = function(text) {
        			return {
        				line: line(),
        				column: column(),
        				offset: offset(),
        				endPos: peg$currPos,
        				syntax: "BlockElementContentText",
        				text: text
        			};
        		},
        peg$c63 = "contents of inline element",
        peg$c64 = function(c, cc) {
        			var processed = [c];
        			if (cc !== "") {
        				if (Array.isArray(cc.content)) {
        					cc.content.forEach(function (c) {
        						processed.push(c);
        					});
        				} else {
        					processed.push(cc.content);
        				}
        			}
        			return {
        				line: line(),
        				column: column(),
        				offset: offset(),
        				endPos: peg$currPos,
        				syntax: "InlineElementContents",
        				content: processed
        			};
        		},
        peg$c65 = "content of inline element",
        peg$c66 = function(c) {
        			return {
        				line: line(),
        				column: column(),
        				offset: offset(),
        				endPos: peg$currPos,
        				syntax: "InlineElementContent",
        				content: c
        			};
        		},
        peg$c67 = "text of inline element",
        peg$c68 = /^[^\r\n}]/,
        peg$c69 = "[^\\r\\n}]",
        peg$c70 = function(text) {
        			return {
        				line: line(),
        				column: column(),
        				offset: offset(),
        				endPos: peg$currPos,
        				syntax: "InlineElementContentText",
        				text: text
        			};
        		},
        peg$c71 = "inline content",
        peg$c72 = function(c) {
        			return {
        				line: line(),
        				column: column(),
        				offset: offset(),
        				endPos: peg$currPos,
        				syntax: "SinglelineContent",
        				content: c
        			};
        		},
        peg$c73 = "children of inline content",
        peg$c74 = function(c, cc) {
        			var processed = [c];
        			if (cc !== "") {
        				if (Array.isArray(cc.content)) {
        					cc.content.forEach(function (c) {
        						processed.push(c);
        					});
        				} else {
        					processed.push(cc.content);
        				}
        			}
        			return {
        				line: line(),
        				column: column(),
        				offset: offset(),
        				endPos: peg$currPos,
        				syntax: "ContentInlines",
        				content: processed
        			};
        		},
        peg$c75 = "child of inline content",
        peg$c76 = function(c) {
        			return {
        				line: line(),
        				column: column(),
        				offset: offset(),
        				endPos: peg$currPos,
        				syntax: "ContentInline",
        				content: c
        			};
        		},
        peg$c77 = "text of child of inline content",
        peg$c78 = function(text) {
        			return {
        				line: line(),
        				column: column(),
        				offset: offset(),
        				endPos: peg$currPos,
        				syntax: "ContentInlineText",
        				text: text
        			};
        		},
        peg$c79 = "ulist",
        peg$c80 = function(c, cc) {
        			var processed = [c];
        			if (cc !== "") {
        				if (Array.isArray(cc.content)) {
        					cc.content.forEach(function (c) {
        						processed.push(c);
        					});
        				} else {
        					processed.push(cc.content);
        				}
        			}
        			return {
        				line: line(),
        				column: column(),
        				offset: offset(),
        				endPos: peg$currPos,
        				syntax: "Ulist",
        				content: processed
        			};
        		},
        peg$c81 = "ulist element",
        peg$c82 = " ",
        peg$c83 = "\" \"",
        peg$c84 = "*",
        peg$c85 = "\"*\"",
        peg$c86 = function(level, text) {
        				return {
        					syntax: "UlistElement",
        					line: line(),
        					column: column(),
        					offset: offset(),
        					endPos: peg$currPos,
        					level: level.length,
        					text: text
        				};
        			},
        peg$c87 = "olist",
        peg$c88 = function(c, cc) {
        			var processed = [c];
        			if (cc !== "") {
        				if (Array.isArray(cc.content)) {
        					cc.content.forEach(function (c) {
        						processed.push(c);
        					});
        				} else {
        					processed.push(cc.content);
        				}
        			}
        			return {
        				line: line(),
        				column: column(),
        				offset: offset(),
        				endPos: peg$currPos,
        				syntax: "Olist",
        				content: processed
        			};
        		},
        peg$c89 = "olist element",
        peg$c90 = ".",
        peg$c91 = "\".\"",
        peg$c92 = function(n, text) {
        				return {
        					syntax: "OlistElement",
        					line: line(),
        					column: column(),
        					offset: offset(),
        					endPos: peg$currPos,
        					no: parseInt(n),
        					text: text
        				};
        			},
        peg$c93 = "dlist",
        peg$c94 = function(c, cc) {
        			var processed = [c];
        			if (cc !== "") {
        				if (Array.isArray(cc.content)) {
        					cc.content.forEach(function (c) {
        						processed.push(c);
        					});
        				} else {
        					processed.push(cc.content);
        				}
        			}
        			return {
        				line: line(),
        				column: column(),
        				offset: offset(),
        				endPos: peg$currPos,
        				syntax: "Dlist",
        				content: processed
        			};
        		},
        peg$c95 = "dlist element",
        peg$c96 = ":",
        peg$c97 = "\":\"",
        peg$c98 = function(text, content) {
        				return {
        					syntax: "DlistElement",
        					line: line(),
        					column: column(),
        					offset: offset(),
        					endPos: peg$currPos,
        					text: text,
        					content: content
        				};
        			},
        peg$c99 = "content of dlist element",
        peg$c100 = /^[ \t]/,
        peg$c101 = "[ \\t]",
        peg$c102 = function(c) {
        			return {
        				line: line(),
        				column: column(),
        				offset: offset(),
        				endPos: peg$currPos,
        				syntax: "DlistElementContent",
        				content: c
        			};
        		},
        peg$c103 = "signle line comment",
        peg$c104 = "#@",
        peg$c105 = "\"#@\"",
        peg$c106 = function(text) {
        			return {
        				line: line(),
        				column: column(),
        				offset: offset(),
        				endPos: peg$currPos,
        				syntax: "SinglelineComment",
        				text: text
        			};
        		},
        peg$c107 = "digits",
        peg$c108 = "digit",
        peg$c109 = /^[0-9]/,
        peg$c110 = "[0-9]",
        peg$c111 = "lower alphabet",
        peg$c112 = /^[a-z]/,
        peg$c113 = "[a-z]",
        peg$c114 = "newline",
        peg$c115 = "\r\n",
        peg$c116 = "\"\\r\\n\"",
        peg$c117 = "\n",
        peg$c118 = "\"\\n\"",
        peg$c119 = "spacer",
        peg$c120 = "space",
        peg$c121 = /^[ \t\r\n]/,
        peg$c122 = "[ \\t\\r\\n]",
        peg$c123 = "end of file",

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$cache = {},
        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$cleanupExpected(expected) {
      var i = 0;

      expected.sort();

      while (i < expected.length) {
        if (expected[i - 1] === expected[i]) {
          expected.splice(i, 1);
        } else {
          i++;
        }
      }
    }

    function peg$parseStart() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 38 + 0,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== null) {
        s2 = peg$parseChapters();
        if (s2 === null) {
          s2 = peg$c2;
        }
        if (s2 !== null) {
          s3 = peg$parse_();
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c3(s2);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c0); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseChapters() {
      var s0, s1, s2;

      var key    = peg$currPos * 38 + 1,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseChapter();
      if (s1 !== null) {
        s2 = peg$parseChapters();
        if (s2 === null) {
          s2 = peg$c2;
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c5(s1, s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c4); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseChapter() {
      var s0, s1, s2;

      var key    = peg$currPos * 38 + 2,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseHeadline();
      if (s1 !== null) {
        s2 = peg$parseParagraphs();
        if (s2 === null) {
          s2 = peg$c2;
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c7(s1, s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c6); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseHeadline() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 38 + 3,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (input.charCodeAt(peg$currPos) === 61) {
        s2 = peg$c10;
        peg$currPos++;
      } else {
        s2 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c11); }
      }
      if (s2 !== null) {
        while (s2 !== null) {
          s1.push(s2);
          if (input.charCodeAt(peg$currPos) === 61) {
            s2 = peg$c10;
            peg$currPos++;
          } else {
            s2 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c11); }
          }
        }
      } else {
        s1 = peg$c1;
      }
      if (s1 !== null) {
        s2 = peg$parseBracketArg();
        if (s2 === null) {
          s2 = peg$c2;
        }
        if (s2 !== null) {
          s3 = peg$parseBraceArg();
          if (s3 === null) {
            s3 = peg$c2;
          }
          if (s3 !== null) {
            s4 = [];
            s5 = peg$parseSpace();
            while (s5 !== null) {
              s4.push(s5);
              s5 = peg$parseSpace();
            }
            if (s4 !== null) {
              s5 = peg$parseSinglelineContent();
              if (s5 !== null) {
                s6 = [];
                s7 = peg$parseNewline();
                while (s7 !== null) {
                  s6.push(s7);
                  s7 = peg$parseNewline();
                }
                if (s6 !== null) {
                  peg$reportedPos = s0;
                  s1 = peg$c12(s1, s2, s3, s5);
                  if (s1 === null) {
                    peg$currPos = s0;
                    s0 = s1;
                  } else {
                    s0 = s1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseParagraphs() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 38 + 4,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 61) {
        s2 = peg$c10;
        peg$currPos++;
      } else {
        s2 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c11); }
      }
      peg$silentFails--;
      if (s2 === null) {
        s1 = peg$c2;
      } else {
        peg$currPos = s1;
        s1 = peg$c1;
      }
      if (s1 !== null) {
        s2 = peg$parseParagraph();
        if (s2 !== null) {
          s3 = peg$parseParagraphs();
          if (s3 === null) {
            s3 = peg$c2;
          }
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c14(s2, s3);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c13); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseParagraph() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 38 + 5,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseNewline();
      while (s2 !== null) {
        s1.push(s2);
        s2 = peg$parseNewline();
      }
      if (s1 !== null) {
        s2 = peg$parseContents();
        if (s2 !== null) {
          s3 = peg$parseNewline();
          if (s3 === null) {
            s3 = peg$c2;
          }
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c16(s2);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c15); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseContents() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 38 + 6,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c18); }
      }
      peg$silentFails--;
      if (s2 !== null) {
        peg$currPos = s1;
        s1 = peg$c2;
      } else {
        s1 = peg$c1;
      }
      if (s1 !== null) {
        s2 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 61) {
          s3 = peg$c10;
          peg$currPos++;
        } else {
          s3 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c11); }
        }
        peg$silentFails--;
        if (s3 === null) {
          s2 = peg$c2;
        } else {
          peg$currPos = s2;
          s2 = peg$c1;
        }
        if (s2 !== null) {
          s3 = peg$parseContent();
          if (s3 !== null) {
            s4 = peg$parseContents();
            if (s4 === null) {
              s4 = peg$c2;
            }
            if (s4 !== null) {
              s5 = peg$parseNewline();
              if (s5 === null) {
                s5 = peg$c2;
              }
              if (s5 !== null) {
                peg$reportedPos = s0;
                s1 = peg$c19(s3, s4);
                if (s1 === null) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c17); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseContent() {
      var s0, s1;

      var key    = peg$currPos * 38 + 7,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseSinglelineComment();
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c21(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        s1 = peg$parseBlockElement();
        if (s1 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c21(s1);
        }
        if (s1 === null) {
          peg$currPos = s0;
          s0 = s1;
        } else {
          s0 = s1;
        }
        if (s0 === null) {
          s0 = peg$currPos;
          s1 = peg$parseInlineElement();
          if (s1 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c21(s1);
          }
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
          if (s0 === null) {
            s0 = peg$currPos;
            s1 = peg$parseUlist();
            if (s1 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c21(s1);
            }
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
            if (s0 === null) {
              s0 = peg$currPos;
              s1 = peg$parseOlist();
              if (s1 !== null) {
                peg$reportedPos = s0;
                s1 = peg$c21(s1);
              }
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
              if (s0 === null) {
                s0 = peg$currPos;
                s1 = peg$parseDlist();
                if (s1 !== null) {
                  peg$reportedPos = s0;
                  s1 = peg$c21(s1);
                }
                if (s1 === null) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
                if (s0 === null) {
                  s0 = peg$currPos;
                  s1 = peg$parseContentText();
                  if (s1 !== null) {
                    peg$reportedPos = s0;
                    s1 = peg$c21(s1);
                  }
                  if (s1 === null) {
                    peg$currPos = s0;
                    s0 = s1;
                  } else {
                    s0 = s1;
                  }
                }
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c20); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseContentText() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      var key    = peg$currPos * 38 + 8,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = peg$parseNewline();
      peg$silentFails--;
      if (s4 === null) {
        s3 = peg$c2;
      } else {
        peg$currPos = s3;
        s3 = peg$c1;
      }
      if (s3 !== null) {
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parseHeadline();
        peg$silentFails--;
        if (s5 === null) {
          s4 = peg$c2;
        } else {
          peg$currPos = s4;
          s4 = peg$c1;
        }
        if (s4 !== null) {
          s5 = peg$currPos;
          peg$silentFails++;
          s6 = peg$parseSinglelineComment();
          peg$silentFails--;
          if (s6 === null) {
            s5 = peg$c2;
          } else {
            peg$currPos = s5;
            s5 = peg$c1;
          }
          if (s5 !== null) {
            s6 = peg$currPos;
            peg$silentFails++;
            s7 = peg$parseBlockElement();
            peg$silentFails--;
            if (s7 === null) {
              s6 = peg$c2;
            } else {
              peg$currPos = s6;
              s6 = peg$c1;
            }
            if (s6 !== null) {
              s7 = peg$currPos;
              peg$silentFails++;
              s8 = peg$parseUlist();
              peg$silentFails--;
              if (s8 === null) {
                s7 = peg$c2;
              } else {
                peg$currPos = s7;
                s7 = peg$c1;
              }
              if (s7 !== null) {
                s8 = peg$currPos;
                peg$silentFails++;
                s9 = peg$parseOlist();
                peg$silentFails--;
                if (s9 === null) {
                  s8 = peg$c2;
                } else {
                  peg$currPos = s8;
                  s8 = peg$c1;
                }
                if (s8 !== null) {
                  s9 = peg$currPos;
                  peg$silentFails++;
                  s10 = peg$parseDlist();
                  peg$silentFails--;
                  if (s10 === null) {
                    s9 = peg$c2;
                  } else {
                    peg$currPos = s9;
                    s9 = peg$c1;
                  }
                  if (s9 !== null) {
                    s10 = [];
                    s11 = peg$currPos;
                    s12 = peg$currPos;
                    peg$silentFails++;
                    s13 = peg$parseInlineElement();
                    peg$silentFails--;
                    if (s13 === null) {
                      s12 = peg$c2;
                    } else {
                      peg$currPos = s12;
                      s12 = peg$c1;
                    }
                    if (s12 !== null) {
                      if (peg$c23.test(input.charAt(peg$currPos))) {
                        s13 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s13 = null;
                        if (peg$silentFails === 0) { peg$fail(peg$c24); }
                      }
                      if (s13 !== null) {
                        s12 = [s12, s13];
                        s11 = s12;
                      } else {
                        peg$currPos = s11;
                        s11 = peg$c1;
                      }
                    } else {
                      peg$currPos = s11;
                      s11 = peg$c1;
                    }
                    if (s11 !== null) {
                      while (s11 !== null) {
                        s10.push(s11);
                        s11 = peg$currPos;
                        s12 = peg$currPos;
                        peg$silentFails++;
                        s13 = peg$parseInlineElement();
                        peg$silentFails--;
                        if (s13 === null) {
                          s12 = peg$c2;
                        } else {
                          peg$currPos = s12;
                          s12 = peg$c1;
                        }
                        if (s12 !== null) {
                          if (peg$c23.test(input.charAt(peg$currPos))) {
                            s13 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s13 = null;
                            if (peg$silentFails === 0) { peg$fail(peg$c24); }
                          }
                          if (s13 !== null) {
                            s12 = [s12, s13];
                            s11 = s12;
                          } else {
                            peg$currPos = s11;
                            s11 = peg$c1;
                          }
                        } else {
                          peg$currPos = s11;
                          s11 = peg$c1;
                        }
                      }
                    } else {
                      s10 = peg$c1;
                    }
                    if (s10 !== null) {
                      s11 = peg$parseNewline();
                      if (s11 === null) {
                        s11 = peg$c2;
                      }
                      if (s11 !== null) {
                        s12 = peg$parseContentText();
                        if (s12 === null) {
                          s12 = peg$c2;
                        }
                        if (s12 !== null) {
                          s3 = [s3, s4, s5, s6, s7, s8, s9, s10, s11, s12];
                          s2 = s3;
                        } else {
                          peg$currPos = s2;
                          s2 = peg$c1;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c1;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c1;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c1;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c1;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c1;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c1;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c1;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c1;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c1;
      }
      if (s2 !== null) {
        s2 = input.substring(s1, peg$currPos);
      }
      s1 = s2;
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c25(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c22); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseBlockElement() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 38 + 9,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c27) {
        s1 = peg$c27;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c28); }
      }
      if (s1 !== null) {
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$parseAZ();
        if (s4 !== null) {
          while (s4 !== null) {
            s3.push(s4);
            s4 = peg$parseAZ();
          }
        } else {
          s3 = peg$c1;
        }
        if (s3 !== null) {
          s3 = input.substring(s2, peg$currPos);
        }
        s2 = s3;
        if (s2 !== null) {
          s3 = [];
          s4 = peg$parseBracketArg();
          while (s4 !== null) {
            s3.push(s4);
            s4 = peg$parseBracketArg();
          }
          if (s3 !== null) {
            if (input.charCodeAt(peg$currPos) === 123) {
              s4 = peg$c29;
              peg$currPos++;
            } else {
              s4 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c30); }
            }
            if (s4 !== null) {
              s5 = peg$parseNewline();
              if (s5 !== null) {
                s6 = peg$parseBlockElementContents();
                if (s6 === null) {
                  s6 = peg$c2;
                }
                if (s6 !== null) {
                  if (input.substr(peg$currPos, 3) === peg$c31) {
                    s7 = peg$c31;
                    peg$currPos += 3;
                  } else {
                    s7 = null;
                    if (peg$silentFails === 0) { peg$fail(peg$c32); }
                  }
                  if (s7 !== null) {
                    peg$reportedPos = s0;
                    s1 = peg$c33(s2, s3, s6);
                    if (s1 === null) {
                      peg$currPos = s0;
                      s0 = s1;
                    } else {
                      s0 = s1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c27) {
          s1 = peg$c27;
          peg$currPos += 2;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c28); }
        }
        if (s1 !== null) {
          s2 = peg$currPos;
          s3 = [];
          s4 = peg$parseAZ();
          if (s4 !== null) {
            while (s4 !== null) {
              s3.push(s4);
              s4 = peg$parseAZ();
            }
          } else {
            s3 = peg$c1;
          }
          if (s3 !== null) {
            s3 = input.substring(s2, peg$currPos);
          }
          s2 = s3;
          if (s2 !== null) {
            s3 = [];
            s4 = peg$parseBracketArg();
            while (s4 !== null) {
              s3.push(s4);
              s4 = peg$parseBracketArg();
            }
            if (s3 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c34(s2, s3);
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c26); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseInlineElement() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 38 + 10,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c36) {
        s1 = peg$c36;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c37); }
      }
      if (s1 !== null) {
        s2 = peg$currPos;
        s3 = [];
        if (peg$c38.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c39); }
        }
        if (s4 !== null) {
          while (s4 !== null) {
            s3.push(s4);
            if (peg$c38.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c39); }
            }
          }
        } else {
          s3 = peg$c1;
        }
        if (s3 !== null) {
          s3 = input.substring(s2, peg$currPos);
        }
        s2 = s3;
        if (s2 !== null) {
          if (input.charCodeAt(peg$currPos) === 62) {
            s3 = peg$c40;
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c41); }
          }
          if (s3 !== null) {
            if (input.charCodeAt(peg$currPos) === 123) {
              s4 = peg$c29;
              peg$currPos++;
            } else {
              s4 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c30); }
            }
            if (s4 !== null) {
              s5 = peg$parseInlineElementContents();
              if (s5 === null) {
                s5 = peg$c2;
              }
              if (s5 !== null) {
                if (input.charCodeAt(peg$currPos) === 125) {
                  s6 = peg$c42;
                  peg$currPos++;
                } else {
                  s6 = null;
                  if (peg$silentFails === 0) { peg$fail(peg$c43); }
                }
                if (s6 !== null) {
                  peg$reportedPos = s0;
                  s1 = peg$c44(s2, s5);
                  if (s1 === null) {
                    peg$currPos = s0;
                    s0 = s1;
                  } else {
                    s0 = s1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c35); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseBracketArg() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 38 + 11,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c46;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c47); }
      }
      if (s1 !== null) {
        s2 = peg$currPos;
        s3 = [];
        if (peg$c48.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c49); }
        }
        while (s4 !== null) {
          s3.push(s4);
          if (peg$c48.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c49); }
          }
        }
        if (s3 !== null) {
          s3 = input.substring(s2, peg$currPos);
        }
        s2 = s3;
        if (s2 !== null) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c50;
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c51); }
          }
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c52(s2);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c45); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseBraceArg() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 38 + 12,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c29;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c30); }
      }
      if (s1 !== null) {
        s2 = peg$currPos;
        s3 = [];
        if (peg$c54.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c55); }
        }
        while (s4 !== null) {
          s3.push(s4);
          if (peg$c54.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c55); }
          }
        }
        if (s3 !== null) {
          s3 = input.substring(s2, peg$currPos);
        }
        s2 = s3;
        if (s2 !== null) {
          if (input.charCodeAt(peg$currPos) === 125) {
            s3 = peg$c42;
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c43); }
          }
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c56(s2);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c53); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseBlockElementContents() {
      var s0, s1, s2;

      var key    = peg$currPos * 38 + 13,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseBlockElementContent();
      if (s1 !== null) {
        s2 = peg$parseBlockElementContents();
        if (s2 === null) {
          s2 = peg$c2;
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c58(s1, s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c57); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseBlockElementContent() {
      var s0, s1;

      var key    = peg$currPos * 38 + 14,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseSinglelineComment();
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c60(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        s1 = peg$parseBlockElement();
        if (s1 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c60(s1);
        }
        if (s1 === null) {
          peg$currPos = s0;
          s0 = s1;
        } else {
          s0 = s1;
        }
        if (s0 === null) {
          s0 = peg$currPos;
          s1 = peg$parseInlineElement();
          if (s1 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c60(s1);
          }
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
          if (s0 === null) {
            s0 = peg$currPos;
            s1 = peg$parseUlist();
            if (s1 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c60(s1);
            }
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
            if (s0 === null) {
              s0 = peg$currPos;
              s1 = peg$parseOlist();
              if (s1 !== null) {
                peg$reportedPos = s0;
                s1 = peg$c60(s1);
              }
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
              if (s0 === null) {
                s0 = peg$currPos;
                s1 = peg$parseDlist();
                if (s1 !== null) {
                  peg$reportedPos = s0;
                  s1 = peg$c60(s1);
                }
                if (s1 === null) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
                if (s0 === null) {
                  s0 = peg$currPos;
                  s1 = peg$parseBlockElementContentText();
                  if (s1 !== null) {
                    peg$reportedPos = s0;
                    s1 = peg$c60(s1);
                  }
                  if (s1 === null) {
                    peg$currPos = s0;
                    s0 = s1;
                  } else {
                    s0 = s1;
                  }
                }
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c59); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseBlockElementContentText() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

      var key    = peg$currPos * 38 + 15,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      if (input.length > peg$currPos) {
        s5 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s5 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c18); }
      }
      peg$silentFails--;
      if (s5 !== null) {
        peg$currPos = s4;
        s4 = peg$c2;
      } else {
        s4 = peg$c1;
      }
      if (s4 !== null) {
        s5 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 3) === peg$c31) {
          s6 = peg$c31;
          peg$currPos += 3;
        } else {
          s6 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c32); }
        }
        peg$silentFails--;
        if (s6 === null) {
          s5 = peg$c2;
        } else {
          peg$currPos = s5;
          s5 = peg$c1;
        }
        if (s5 !== null) {
          s6 = peg$currPos;
          peg$silentFails++;
          s7 = peg$parseSinglelineComment();
          peg$silentFails--;
          if (s7 === null) {
            s6 = peg$c2;
          } else {
            peg$currPos = s6;
            s6 = peg$c1;
          }
          if (s6 !== null) {
            s7 = peg$currPos;
            peg$silentFails++;
            s8 = peg$parseBlockElement();
            peg$silentFails--;
            if (s8 === null) {
              s7 = peg$c2;
            } else {
              peg$currPos = s7;
              s7 = peg$c1;
            }
            if (s7 !== null) {
              s8 = peg$currPos;
              peg$silentFails++;
              s9 = peg$parseInlineElement();
              peg$silentFails--;
              if (s9 === null) {
                s8 = peg$c2;
              } else {
                peg$currPos = s8;
                s8 = peg$c1;
              }
              if (s8 !== null) {
                s9 = peg$currPos;
                peg$silentFails++;
                s10 = peg$parseUlist();
                peg$silentFails--;
                if (s10 === null) {
                  s9 = peg$c2;
                } else {
                  peg$currPos = s9;
                  s9 = peg$c1;
                }
                if (s9 !== null) {
                  s10 = peg$currPos;
                  peg$silentFails++;
                  s11 = peg$parseOlist();
                  peg$silentFails--;
                  if (s11 === null) {
                    s10 = peg$c2;
                  } else {
                    peg$currPos = s10;
                    s10 = peg$c1;
                  }
                  if (s10 !== null) {
                    s11 = peg$currPos;
                    peg$silentFails++;
                    s12 = peg$parseDlist();
                    peg$silentFails--;
                    if (s12 === null) {
                      s11 = peg$c2;
                    } else {
                      peg$currPos = s11;
                      s11 = peg$c1;
                    }
                    if (s11 !== null) {
                      s12 = [];
                      s13 = peg$currPos;
                      s14 = peg$currPos;
                      peg$silentFails++;
                      s15 = peg$parseInlineElement();
                      peg$silentFails--;
                      if (s15 === null) {
                        s14 = peg$c2;
                      } else {
                        peg$currPos = s14;
                        s14 = peg$c1;
                      }
                      if (s14 !== null) {
                        if (peg$c23.test(input.charAt(peg$currPos))) {
                          s15 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s15 = null;
                          if (peg$silentFails === 0) { peg$fail(peg$c24); }
                        }
                        if (s15 !== null) {
                          s14 = [s14, s15];
                          s13 = s14;
                        } else {
                          peg$currPos = s13;
                          s13 = peg$c1;
                        }
                      } else {
                        peg$currPos = s13;
                        s13 = peg$c1;
                      }
                      if (s13 !== null) {
                        while (s13 !== null) {
                          s12.push(s13);
                          s13 = peg$currPos;
                          s14 = peg$currPos;
                          peg$silentFails++;
                          s15 = peg$parseInlineElement();
                          peg$silentFails--;
                          if (s15 === null) {
                            s14 = peg$c2;
                          } else {
                            peg$currPos = s14;
                            s14 = peg$c1;
                          }
                          if (s14 !== null) {
                            if (peg$c23.test(input.charAt(peg$currPos))) {
                              s15 = input.charAt(peg$currPos);
                              peg$currPos++;
                            } else {
                              s15 = null;
                              if (peg$silentFails === 0) { peg$fail(peg$c24); }
                            }
                            if (s15 !== null) {
                              s14 = [s14, s15];
                              s13 = s14;
                            } else {
                              peg$currPos = s13;
                              s13 = peg$c1;
                            }
                          } else {
                            peg$currPos = s13;
                            s13 = peg$c1;
                          }
                        }
                      } else {
                        s12 = peg$c1;
                      }
                      if (s12 !== null) {
                        s13 = peg$parseNewline();
                        if (s13 === null) {
                          s13 = peg$c2;
                        }
                        if (s13 !== null) {
                          s4 = [s4, s5, s6, s7, s8, s9, s10, s11, s12, s13];
                          s3 = s4;
                        } else {
                          peg$currPos = s3;
                          s3 = peg$c1;
                        }
                      } else {
                        peg$currPos = s3;
                        s3 = peg$c1;
                      }
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c1;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c1;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c1;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c1;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$c1;
      }
      if (s3 !== null) {
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c18); }
          }
          peg$silentFails--;
          if (s5 !== null) {
            peg$currPos = s4;
            s4 = peg$c2;
          } else {
            s4 = peg$c1;
          }
          if (s4 !== null) {
            s5 = peg$currPos;
            peg$silentFails++;
            if (input.substr(peg$currPos, 3) === peg$c31) {
              s6 = peg$c31;
              peg$currPos += 3;
            } else {
              s6 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c32); }
            }
            peg$silentFails--;
            if (s6 === null) {
              s5 = peg$c2;
            } else {
              peg$currPos = s5;
              s5 = peg$c1;
            }
            if (s5 !== null) {
              s6 = peg$currPos;
              peg$silentFails++;
              s7 = peg$parseSinglelineComment();
              peg$silentFails--;
              if (s7 === null) {
                s6 = peg$c2;
              } else {
                peg$currPos = s6;
                s6 = peg$c1;
              }
              if (s6 !== null) {
                s7 = peg$currPos;
                peg$silentFails++;
                s8 = peg$parseBlockElement();
                peg$silentFails--;
                if (s8 === null) {
                  s7 = peg$c2;
                } else {
                  peg$currPos = s7;
                  s7 = peg$c1;
                }
                if (s7 !== null) {
                  s8 = peg$currPos;
                  peg$silentFails++;
                  s9 = peg$parseInlineElement();
                  peg$silentFails--;
                  if (s9 === null) {
                    s8 = peg$c2;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$c1;
                  }
                  if (s8 !== null) {
                    s9 = peg$currPos;
                    peg$silentFails++;
                    s10 = peg$parseUlist();
                    peg$silentFails--;
                    if (s10 === null) {
                      s9 = peg$c2;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$c1;
                    }
                    if (s9 !== null) {
                      s10 = peg$currPos;
                      peg$silentFails++;
                      s11 = peg$parseOlist();
                      peg$silentFails--;
                      if (s11 === null) {
                        s10 = peg$c2;
                      } else {
                        peg$currPos = s10;
                        s10 = peg$c1;
                      }
                      if (s10 !== null) {
                        s11 = peg$currPos;
                        peg$silentFails++;
                        s12 = peg$parseDlist();
                        peg$silentFails--;
                        if (s12 === null) {
                          s11 = peg$c2;
                        } else {
                          peg$currPos = s11;
                          s11 = peg$c1;
                        }
                        if (s11 !== null) {
                          s12 = [];
                          s13 = peg$currPos;
                          s14 = peg$currPos;
                          peg$silentFails++;
                          s15 = peg$parseInlineElement();
                          peg$silentFails--;
                          if (s15 === null) {
                            s14 = peg$c2;
                          } else {
                            peg$currPos = s14;
                            s14 = peg$c1;
                          }
                          if (s14 !== null) {
                            if (peg$c23.test(input.charAt(peg$currPos))) {
                              s15 = input.charAt(peg$currPos);
                              peg$currPos++;
                            } else {
                              s15 = null;
                              if (peg$silentFails === 0) { peg$fail(peg$c24); }
                            }
                            if (s15 !== null) {
                              s14 = [s14, s15];
                              s13 = s14;
                            } else {
                              peg$currPos = s13;
                              s13 = peg$c1;
                            }
                          } else {
                            peg$currPos = s13;
                            s13 = peg$c1;
                          }
                          if (s13 !== null) {
                            while (s13 !== null) {
                              s12.push(s13);
                              s13 = peg$currPos;
                              s14 = peg$currPos;
                              peg$silentFails++;
                              s15 = peg$parseInlineElement();
                              peg$silentFails--;
                              if (s15 === null) {
                                s14 = peg$c2;
                              } else {
                                peg$currPos = s14;
                                s14 = peg$c1;
                              }
                              if (s14 !== null) {
                                if (peg$c23.test(input.charAt(peg$currPos))) {
                                  s15 = input.charAt(peg$currPos);
                                  peg$currPos++;
                                } else {
                                  s15 = null;
                                  if (peg$silentFails === 0) { peg$fail(peg$c24); }
                                }
                                if (s15 !== null) {
                                  s14 = [s14, s15];
                                  s13 = s14;
                                } else {
                                  peg$currPos = s13;
                                  s13 = peg$c1;
                                }
                              } else {
                                peg$currPos = s13;
                                s13 = peg$c1;
                              }
                            }
                          } else {
                            s12 = peg$c1;
                          }
                          if (s12 !== null) {
                            s13 = peg$parseNewline();
                            if (s13 === null) {
                              s13 = peg$c2;
                            }
                            if (s13 !== null) {
                              s4 = [s4, s5, s6, s7, s8, s9, s10, s11, s12, s13];
                              s3 = s4;
                            } else {
                              peg$currPos = s3;
                              s3 = peg$c1;
                            }
                          } else {
                            peg$currPos = s3;
                            s3 = peg$c1;
                          }
                        } else {
                          peg$currPos = s3;
                          s3 = peg$c1;
                        }
                      } else {
                        peg$currPos = s3;
                        s3 = peg$c1;
                      }
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c1;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c1;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c1;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        }
      } else {
        s2 = peg$c1;
      }
      if (s2 !== null) {
        s2 = input.substring(s1, peg$currPos);
      }
      s1 = s2;
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c62(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c61); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseInlineElementContents() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 38 + 16,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 125) {
        s2 = peg$c42;
        peg$currPos++;
      } else {
        s2 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c43); }
      }
      peg$silentFails--;
      if (s2 === null) {
        s1 = peg$c2;
      } else {
        peg$currPos = s1;
        s1 = peg$c1;
      }
      if (s1 !== null) {
        s2 = peg$parseInlineElementContent();
        if (s2 !== null) {
          s3 = peg$parseInlineElementContents();
          if (s3 === null) {
            s3 = peg$c2;
          }
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c64(s2, s3);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c63); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseInlineElementContent() {
      var s0, s1;

      var key    = peg$currPos * 38 + 17,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseInlineElement();
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c66(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        s1 = peg$parseInlineElementContentText();
        if (s1 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c66(s1);
        }
        if (s1 === null) {
          peg$currPos = s0;
          s0 = s1;
        } else {
          s0 = s1;
        }
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c65); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseInlineElementContentText() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 38 + 18,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      s5 = peg$parseInlineElement();
      peg$silentFails--;
      if (s5 === null) {
        s4 = peg$c2;
      } else {
        peg$currPos = s4;
        s4 = peg$c1;
      }
      if (s4 !== null) {
        if (peg$c68.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c69); }
        }
        if (s5 !== null) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$c1;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$c1;
      }
      if (s3 !== null) {
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$parseInlineElement();
          peg$silentFails--;
          if (s5 === null) {
            s4 = peg$c2;
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
          if (s4 !== null) {
            if (peg$c68.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c69); }
            }
            if (s5 !== null) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        }
      } else {
        s2 = peg$c1;
      }
      if (s2 !== null) {
        s2 = input.substring(s1, peg$currPos);
      }
      s1 = s2;
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c70(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c67); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseSinglelineContent() {
      var s0, s1, s2;

      var key    = peg$currPos * 38 + 19,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseContentInlines();
      if (s1 !== null) {
        s2 = peg$parseNewline();
        if (s2 === null) {
          s2 = peg$parseEOF();
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c72(s1);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c71); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseContentInlines() {
      var s0, s1, s2;

      var key    = peg$currPos * 38 + 20,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseContentInline();
      if (s1 !== null) {
        s2 = peg$parseContentInlines();
        if (s2 === null) {
          s2 = peg$c2;
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c74(s1, s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c73); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseContentInline() {
      var s0, s1;

      var key    = peg$currPos * 38 + 21,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseInlineElement();
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c76(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        s1 = peg$parseContentInlineText();
        if (s1 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c76(s1);
        }
        if (s1 === null) {
          peg$currPos = s0;
          s0 = s1;
        } else {
          s0 = s1;
        }
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c75); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseContentInlineText() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 38 + 22,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      s5 = peg$parseInlineElement();
      peg$silentFails--;
      if (s5 === null) {
        s4 = peg$c2;
      } else {
        peg$currPos = s4;
        s4 = peg$c1;
      }
      if (s4 !== null) {
        if (peg$c23.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c24); }
        }
        if (s5 !== null) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$c1;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$c1;
      }
      if (s3 !== null) {
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$parseInlineElement();
          peg$silentFails--;
          if (s5 === null) {
            s4 = peg$c2;
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
          if (s4 !== null) {
            if (peg$c23.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c24); }
            }
            if (s5 !== null) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        }
      } else {
        s2 = peg$c1;
      }
      if (s2 !== null) {
        s2 = input.substring(s1, peg$currPos);
      }
      s1 = s2;
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c78(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c77); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseUlist() {
      var s0, s1, s2;

      var key    = peg$currPos * 38 + 23,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseUlistElement();
      if (s1 === null) {
        s1 = peg$parseSinglelineComment();
      }
      if (s1 !== null) {
        s2 = peg$parseUlist();
        if (s2 === null) {
          s2 = peg$c2;
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c80(s1, s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c79); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseUlistElement() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 38 + 24,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s2 = peg$c82;
        peg$currPos++;
      } else {
        s2 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c83); }
      }
      if (s2 !== null) {
        while (s2 !== null) {
          s1.push(s2);
          if (input.charCodeAt(peg$currPos) === 32) {
            s2 = peg$c82;
            peg$currPos++;
          } else {
            s2 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c83); }
          }
        }
      } else {
        s1 = peg$c1;
      }
      if (s1 !== null) {
        s2 = [];
        if (input.charCodeAt(peg$currPos) === 42) {
          s3 = peg$c84;
          peg$currPos++;
        } else {
          s3 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c85); }
        }
        if (s3 !== null) {
          while (s3 !== null) {
            s2.push(s3);
            if (input.charCodeAt(peg$currPos) === 42) {
              s3 = peg$c84;
              peg$currPos++;
            } else {
              s3 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c85); }
            }
          }
        } else {
          s2 = peg$c1;
        }
        if (s2 !== null) {
          s3 = peg$parse_();
          if (s3 !== null) {
            s4 = peg$parseSinglelineContent();
            if (s4 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c86(s2, s4);
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c81); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseOlist() {
      var s0, s1, s2;

      var key    = peg$currPos * 38 + 25,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseOlistElement();
      if (s1 === null) {
        s1 = peg$parseSinglelineComment();
      }
      if (s1 !== null) {
        s2 = peg$parseOlist();
        if (s2 === null) {
          s2 = peg$c2;
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c88(s1, s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c87); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseOlistElement() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 38 + 26,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s2 = peg$c82;
        peg$currPos++;
      } else {
        s2 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c83); }
      }
      if (s2 !== null) {
        while (s2 !== null) {
          s1.push(s2);
          if (input.charCodeAt(peg$currPos) === 32) {
            s2 = peg$c82;
            peg$currPos++;
          } else {
            s2 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c83); }
          }
        }
      } else {
        s1 = peg$c1;
      }
      if (s1 !== null) {
        s2 = peg$parseDigits();
        if (s2 !== null) {
          if (input.charCodeAt(peg$currPos) === 46) {
            s3 = peg$c90;
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c91); }
          }
          if (s3 !== null) {
            s4 = peg$parse_();
            if (s4 !== null) {
              s5 = peg$parseSinglelineContent();
              if (s5 !== null) {
                peg$reportedPos = s0;
                s1 = peg$c92(s2, s5);
                if (s1 === null) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c89); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseDlist() {
      var s0, s1, s2;

      var key    = peg$currPos * 38 + 27,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseDlistElement();
      if (s1 === null) {
        s1 = peg$parseSinglelineComment();
      }
      if (s1 !== null) {
        s2 = peg$parseDlist();
        if (s2 === null) {
          s2 = peg$c2;
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c94(s1, s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c93); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseDlistElement() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 38 + 28,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s2 = peg$c82;
        peg$currPos++;
      } else {
        s2 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c83); }
      }
      while (s2 !== null) {
        s1.push(s2);
        if (input.charCodeAt(peg$currPos) === 32) {
          s2 = peg$c82;
          peg$currPos++;
        } else {
          s2 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c83); }
        }
      }
      if (s1 !== null) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s2 = peg$c96;
          peg$currPos++;
        } else {
          s2 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c97); }
        }
        if (s2 !== null) {
          if (input.charCodeAt(peg$currPos) === 32) {
            s3 = peg$c82;
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c83); }
          }
          if (s3 !== null) {
            s4 = peg$parse_();
            if (s4 !== null) {
              s5 = peg$parseSinglelineContent();
              if (s5 !== null) {
                s6 = peg$parseDlistElementContent();
                if (s6 !== null) {
                  peg$reportedPos = s0;
                  s1 = peg$c98(s5, s6);
                  if (s1 === null) {
                    peg$currPos = s0;
                    s0 = s1;
                  } else {
                    s0 = s1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c95); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseDlistElementContent() {
      var s0, s1, s2;

      var key    = peg$currPos * 38 + 29,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (peg$c100.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c101); }
      }
      if (s2 !== null) {
        while (s2 !== null) {
          s1.push(s2);
          if (peg$c100.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c101); }
          }
        }
      } else {
        s1 = peg$c1;
      }
      if (s1 !== null) {
        s2 = peg$parseSinglelineContent();
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c102(s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c99); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseSinglelineComment() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 38 + 30,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c104) {
        s3 = peg$c104;
        peg$currPos += 2;
      } else {
        s3 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c105); }
      }
      if (s3 !== null) {
        s4 = peg$currPos;
        s5 = [];
        if (peg$c23.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c24); }
        }
        while (s6 !== null) {
          s5.push(s6);
          if (peg$c23.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c24); }
          }
        }
        if (s5 !== null) {
          s5 = input.substring(s4, peg$currPos);
        }
        s4 = s5;
        if (s4 !== null) {
          s5 = peg$parseNewline();
          if (s5 === null) {
            s5 = peg$c2;
          }
          if (s5 !== null) {
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c1;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c1;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c1;
      }
      if (s2 !== null) {
        s2 = input.substring(s1, peg$currPos);
      }
      s1 = s2;
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c106(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c103); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseDigits() {
      var s0, s1, s2;

      var key    = peg$currPos * 38 + 31,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseDigit();
      if (s2 !== null) {
        while (s2 !== null) {
          s1.push(s2);
          s2 = peg$parseDigit();
        }
      } else {
        s1 = peg$c1;
      }
      if (s1 !== null) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c107); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseDigit() {
      var s0, s1;

      var key    = peg$currPos * 38 + 32,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      if (peg$c109.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c110); }
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c108); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseAZ() {
      var s0, s1;

      var key    = peg$currPos * 38 + 33,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      if (peg$c112.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c113); }
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c111); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseNewline() {
      var s0, s1;

      var key    = peg$currPos * 38 + 34,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      if (input.substr(peg$currPos, 2) === peg$c115) {
        s0 = peg$c115;
        peg$currPos += 2;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c116); }
      }
      if (s0 === null) {
        if (input.charCodeAt(peg$currPos) === 10) {
          s0 = peg$c117;
          peg$currPos++;
        } else {
          s0 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c118); }
        }
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c114); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parse_() {
      var s0, s1, s2;

      var key    = peg$currPos * 38 + 35,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseSpace();
      while (s2 !== null) {
        s1.push(s2);
        s2 = peg$parseSpace();
      }
      if (s1 !== null) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c119); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseSpace() {
      var s0, s1;

      var key    = peg$currPos * 38 + 36,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      if (peg$c121.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c122); }
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c120); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseEOF() {
      var s0, s1;

      var key    = peg$currPos * 38 + 37,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      peg$silentFails++;
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c18); }
      }
      peg$silentFails--;
      if (s1 === null) {
        s0 = peg$c2;
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c123); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== null && peg$currPos === input.length) {
      return peg$result;
    } else {
      peg$cleanupExpected(peg$maxFailExpected);
      peg$reportedPos = Math.max(peg$currPos, peg$maxFailPos);

      throw new SyntaxError(
        peg$maxFailExpected,
        peg$reportedPos < input.length ? input.charAt(peg$reportedPos) : null,
        peg$reportedPos,
        peg$computePosDetails(peg$reportedPos).line,
        peg$computePosDetails(peg$reportedPos).column
      );
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
;var ReVIEW;
(function (ReVIEW) {
    function isNodeJS() {
        return typeof window === "undefined";
    }
    ReVIEW.isNodeJS = isNodeJS;

    function flatten(data) {
        if (data.some(function (d) {
            return Array.isArray(d);
        })) {
            return flatten(data.reduce(function (p, c) {
                return p.concat(c);
            }, []));
        } else {
            return data;
        }
    }
    ReVIEW.flatten = flatten;

    function nodeToString(process, node) {
        return process.input.substring(node.offset, node.endPos);
    }
    ReVIEW.nodeToString = nodeToString;

    function nodeContentToString(process, node) {
        var minPos = Number.MAX_VALUE;
        var maxPos = -1;

        var childVisitor = {
            visitDefaultPre: function (node) {
                minPos = Math.min(minPos, node.offset);
                maxPos = Math.max(maxPos, node.endPos);
            }
        };

        ReVIEW.visit(node, {
            visitDefaultPre: function (node) {
            },
            visitNodePre: function (node) {
                node.childNodes.forEach(function (child) {
                    return ReVIEW.visit(child, childVisitor);
                });
                return false;
            },
            visitHeadlinePre: function (node) {
                ReVIEW.visit(node.caption, childVisitor);
                return false;
            },
            visitUlistPre: function (node) {
                ReVIEW.visit(node.text, childVisitor);
                return false;
            },
            visitDlistPre: function (node) {
                ReVIEW.visit(node.text, childVisitor);
                ReVIEW.visit(node.content, childVisitor);
                return false;
            },
            visitOlistPre: function (node) {
                ReVIEW.visit(node.text, childVisitor);
                return false;
            },
            visitTextPre: function (text) {
                ReVIEW.visit(node, childVisitor);
                return false;
            }
        });
        if (maxPos < 0) {
            return "";
        } else {
            return process.input.substring(minPos, maxPos);
        }
    }
    ReVIEW.nodeContentToString = nodeContentToString;

    function findChapter(node, level) {
        var chapter = null;
        ReVIEW.walk(node, function (node) {
            if (node instanceof ReVIEW.Parse.ChapterSyntaxTree) {
                chapter = node.toChapter();
                if (typeof level === "undefined" || chapter.level === level) {
                    return null;
                }
            }
            return node.parentNode;
        });
        return chapter;
    }
    ReVIEW.findChapter = findChapter;

    (function (IO) {
        function read(path) {
            var fs = require("fs");
            return fs.readFileSync(path, "utf8");
        }
        IO.read = read;

        function write(path, content) {
            var fs = require("fs");
            fs.writeFileSync(path, content);
        }
        IO.write = write;
    })(ReVIEW.IO || (ReVIEW.IO = {}));
    var IO = ReVIEW.IO;
})(ReVIEW || (ReVIEW = {}));
var ReVIEW;
(function (ReVIEW) {
    ReVIEW.ja = {
        "sample": "こんちゃーす！",
        "description": {
            "headline": "チャプターの始まりを示します。\n\"= 見出し\" という形式で書きます。",
            "block_list": "リストを示します。技術書ではプログラムコードの掲載に使います。\n//list[label][caption]{\nalert(\"Hello!\");\n//}\n という形式で書きます。",
            "inline_br": "改行を示します。リスト内での改行や、段落を変えずに改行をしたい場合に使います。"
        },
        "compile": {
            "file_not_exists": "ファイル %s が開けません",
            "block_not_supported": "%s というブロック構文はサポートされていません",
            "inline_not_supported": "%s というインライン構文はサポートされていません",
            "part_is_missing": "パート %s が見つかりません",
            "chapter_is_missing": "チャプター %s が見つかりません",
            "reference_is_missing": "参照先 %s の %s が見つかりません",
            "duplicated_label": "ラベルに重複があるようです",
            "args_length_mismatch": "引数の数に齟齬があります 期待値 %s, 実際 %s",
            "body_string_only": "内容は全て文字でなければいけません",
            "chapter_not_toplevel": "深さ1のチャプターは最上位になければいけません",
            "chapter_topleve_eq1": "最上位のチャプターは深さ1のものでなければいけません",
            "chapter_level_omission": "深さ%sのチャプターは深さ%sのチャプターに属していなければいけません 今は深さ%sのチャプターの下にいます"
        },
        "builder": {
            "chapter": "第%d章",
            "list": "リスト%s.%s"
        }
    };
})(ReVIEW || (ReVIEW = {}));
var ReVIEW;
(function (ReVIEW) {
    ReVIEW.en = {
        "sample": "Hello!"
    };
})(ReVIEW || (ReVIEW = {}));
var ReVIEW;
(function (ReVIEW) {
    (function (i18n) {
        function setup(lang) {
            if (typeof lang === "undefined") { lang = "ja"; }
            if (typeof (i18next).backend !== "undefined") {
                (i18next).backend({
                    fetchOne: function (lng, ns, func) {
                        func(null, data[lng] || data[lang]);
                    }
                });
                i18next.init({ lng: lang });
            } else {
                i18next.init({
                    lng: lang,
                    customLoad: function (lng, ns, options, loadComplete) {
                        loadComplete(null, data[lng] || data["ja-JP"]);
                    }
                });
            }
        }
        i18n.setup = setup;

        function t(str) {
            var args = [];
            for (var _i = 0; _i < (arguments.length - 1); _i++) {
                args[_i] = arguments[_i + 1];
            }
            return i18next.t(str, { postProcess: "sprintf", sprintf: args });
        }
        i18n.t = t;

        var i18next;

        if (ReVIEW.isNodeJS()) {
            i18next = require("i18next");
        } else {
            i18next = (window).i18n;
        }

        var data = {
            "ja": ReVIEW.ja,
            "en": ReVIEW.en
        };

        setup();
    })(ReVIEW.i18n || (ReVIEW.i18n = {}));
    var i18n = ReVIEW.i18n;
})(ReVIEW || (ReVIEW = {}));
var ReVIEW;
(function (ReVIEW) {
    (function (Parse) {
        void 0;
    })(ReVIEW.Parse || (ReVIEW.Parse = {}));
    var Parse = ReVIEW.Parse;

    var SyntaxTree = ReVIEW.Parse.SyntaxTree;
    var BlockElementSyntaxTree = ReVIEW.Parse.BlockElementSyntaxTree;
    var InlineElementSyntaxTree = ReVIEW.Parse.InlineElementSyntaxTree;
    var ArgumentSyntaxTree = ReVIEW.Parse.ArgumentSyntaxTree;
    var ChapterSyntaxTree = ReVIEW.Parse.ChapterSyntaxTree;
    var HeadlineSyntaxTree = ReVIEW.Parse.HeadlineSyntaxTree;
    var UlistElementSyntaxTree = ReVIEW.Parse.UlistElementSyntaxTree;
    var OlistElementSyntaxTree = ReVIEW.Parse.OlistElementSyntaxTree;
    var DlistElementSyntaxTree = ReVIEW.Parse.DlistElementSyntaxTree;
    var NodeSyntaxTree = ReVIEW.Parse.NodeSyntaxTree;
    var TextNodeSyntaxTree = ReVIEW.Parse.TextNodeSyntaxTree;

    function walk(ast, actor) {
        var next = actor(ast);
        if (next) {
            walk(next, actor);
        }
    }
    ReVIEW.walk = walk;

    function visit(ast, v) {
        var newV = {
            visitDefaultPre: v.visitDefaultPre,
            visitDefaultPost: v.visitDefaultPost || (function () {
            }),
            visitBlockElementPre: v.visitBlockElementPre || v.visitNodePre || v.visitDefaultPre,
            visitBlockElementPost: v.visitBlockElementPost || v.visitNodePost || v.visitDefaultPost || (function () {
            }),
            visitInlineElementPre: v.visitInlineElementPre || v.visitNodePre || v.visitDefaultPre,
            visitInlineElementPost: v.visitInlineElementPost || v.visitNodePost || v.visitDefaultPost || (function () {
            }),
            visitNodePre: v.visitNodePre || v.visitDefaultPre,
            visitNodePost: v.visitNodePost || v.visitDefaultPost || (function () {
            }),
            visitArgumentPre: v.visitArgumentPre || v.visitDefaultPre,
            visitArgumentPost: v.visitArgumentPost || v.visitDefaultPost || (function () {
            }),
            visitChapterPre: v.visitChapterPre || v.visitNodePre || v.visitDefaultPre,
            visitChapterPost: v.visitChapterPost || v.visitNodePost || v.visitDefaultPost || (function () {
            }),
            visitHeadlinePre: v.visitHeadlinePre || v.visitDefaultPre,
            visitHeadlinePost: v.visitHeadlinePost || v.visitDefaultPost || (function () {
            }),
            visitUlistPre: v.visitUlistPre || v.visitNodePre || v.visitDefaultPre,
            visitUlistPost: v.visitUlistPost || v.visitNodePost || v.visitDefaultPost || (function () {
            }),
            visitOlistPre: v.visitOlistPre || v.visitDefaultPre,
            visitOlistPost: v.visitOlistPost || v.visitDefaultPost || (function () {
            }),
            visitDlistPre: v.visitDlistPre || v.visitDefaultPre,
            visitDlistPost: v.visitDlistPost || v.visitDefaultPost || (function () {
            }),
            visitTextPre: v.visitTextPre || v.visitDefaultPre,
            visitTextPost: v.visitTextPost || v.visitDefaultPost || (function () {
            })
        };
        newV.visitDefaultPre = newV.visitDefaultPre.bind(v);
        newV.visitDefaultPost = newV.visitDefaultPost.bind(v);
        newV.visitBlockElementPre = newV.visitBlockElementPre.bind(v);
        newV.visitBlockElementPost = newV.visitBlockElementPost.bind(v);
        newV.visitInlineElementPre = newV.visitInlineElementPre.bind(v);
        newV.visitInlineElementPost = newV.visitInlineElementPost.bind(v);
        newV.visitNodePre = newV.visitNodePre.bind(v);
        newV.visitNodePost = newV.visitNodePost.bind(v);
        newV.visitArgumentPre = newV.visitArgumentPre.bind(v);
        newV.visitArgumentPost = newV.visitArgumentPost.bind(v);
        newV.visitChapterPre = newV.visitChapterPre.bind(v);
        newV.visitChapterPost = newV.visitChapterPost.bind(v);
        newV.visitHeadlinePre = newV.visitHeadlinePre.bind(v);
        newV.visitHeadlinePost = newV.visitHeadlinePost.bind(v);
        newV.visitUlistPre = newV.visitUlistPre.bind(v);
        newV.visitUlistPost = newV.visitUlistPost.bind(v);
        newV.visitOlistPre = newV.visitOlistPre.bind(v);
        newV.visitOlistPost = newV.visitOlistPost.bind(v);
        newV.visitDlistPre = newV.visitDlistPre.bind(v);
        newV.visitDlistPost = newV.visitDlistPost.bind(v);
        newV.visitTextPre = newV.visitTextPre.bind(v);
        newV.visitTextPost = newV.visitTextPost.bind(v);
        visitSub(null, ast, newV);
    }
    ReVIEW.visit = visit;

    function visitSub(parent, ast, v) {
        if (ast instanceof ReVIEW.Parse.BlockElementSyntaxTree) {
            var block = ast.toBlockElement();
            var ret = v.visitBlockElementPre(block, parent);
            if (typeof ret === "undefined" || (typeof ret === "boolean" && ret)) {
                block.args.forEach(function (next) {
                    visitSub(ast, next, v);
                });
                block.childNodes.forEach(function (next) {
                    visitSub(ast, next, v);
                });
            } else if (typeof ret === "function") {
                ret(v);
            }
            v.visitBlockElementPost(block, parent);
        } else if (ast instanceof ReVIEW.Parse.InlineElementSyntaxTree) {
            var inline = ast.toInlineElement();
            var ret = v.visitInlineElementPre(inline, parent);
            if (typeof ret === "undefined" || (typeof ret === "boolean" && ret)) {
                inline.childNodes.forEach(function (next) {
                    visitSub(ast, next, v);
                });
            } else if (typeof ret === "function") {
                ret(v);
            }
            v.visitInlineElementPost(inline, parent);
        } else if (ast instanceof ReVIEW.Parse.ArgumentSyntaxTree) {
            var arg = ast.toArgument();
            var ret = v.visitArgumentPre(arg, parent);
            if (typeof ret === "function") {
                ret(v);
            }
            v.visitArgumentPost(arg, parent);
        } else if (ast instanceof ReVIEW.Parse.ChapterSyntaxTree) {
            var chap = ast.toChapter();
            var ret = v.visitChapterPre(chap, parent);
            if (typeof ret === "undefined" || (typeof ret === "boolean" && ret)) {
                visitSub(ast, chap.headline, v);
                if (chap.text) {
                    chap.text.forEach(function (next) {
                        visitSub(ast, next, v);
                    });
                }
                chap.childNodes.forEach(function (next) {
                    visitSub(ast, next, v);
                });
            } else if (typeof ret === "function") {
                ret(v);
            }
            v.visitChapterPost(chap, parent);
        } else if (ast instanceof ReVIEW.Parse.HeadlineSyntaxTree) {
            var head = ast.toHeadline();
            var ret = v.visitHeadlinePre(head, parent);
            if (typeof ret === "undefined" || (typeof ret === "boolean" && ret)) {
                visitSub(ast, head.cmd, v);
                visitSub(ast, head.label, v);
                visitSub(ast, head.caption, v);
            } else if (typeof ret === "function") {
                ret(v);
            }
            v.visitHeadlinePost(head, parent);
        } else if (ast instanceof ReVIEW.Parse.UlistElementSyntaxTree) {
            var ul = ast.toUlist();
            var ret = v.visitUlistPre(ul, parent);
            if (typeof ret === "undefined" || (typeof ret === "boolean" && ret)) {
                visitSub(ast, ul.text, v);
                ul.childNodes.forEach(function (next) {
                    visitSub(ast, next, v);
                });
            } else if (typeof ret === "function") {
                ret(v);
            }
            v.visitUlistPost(ul, parent);
        } else if (ast instanceof ReVIEW.Parse.OlistElementSyntaxTree) {
            var ol = ast.toOlist();
            var ret = v.visitOlistPre(ol, parent);
            if (typeof ret === "undefined" || (typeof ret === "boolean" && ret)) {
                visitSub(ast, ol.text, v);
            } else if (typeof ret === "function") {
                ret(v);
            }
            v.visitOlistPost(ol, parent);
        } else if (ast instanceof ReVIEW.Parse.DlistElementSyntaxTree) {
            var dl = ast.toDlist();
            var ret = v.visitDlistPre(dl, parent);
            if (typeof ret === "undefined" || (typeof ret === "boolean" && ret)) {
                visitSub(ast, dl.text, v);
                visitSub(ast, dl.content, v);
            } else if (typeof ret === "function") {
                ret(v);
            }
            v.visitDlistPost(dl, parent);
        } else if (ast instanceof ReVIEW.Parse.NodeSyntaxTree) {
            var node = ast.toNode();
            var ret = v.visitNodePre(node, parent);
            if (typeof ret === "undefined" || (typeof ret === "boolean" && ret)) {
                node.childNodes.forEach(function (next) {
                    visitSub(ast, next, v);
                });
            } else if (typeof ret === "function") {
                ret(v);
            }
            v.visitNodePost(node, parent);
        } else if (ast instanceof ReVIEW.Parse.TextNodeSyntaxTree) {
            var text = ast.toTextNode();
            var ret = v.visitTextPre(text, parent);
            if (typeof ret === "function") {
                ret(v);
            }
            v.visitTextPost(text, parent);
        } else if (ast) {
            var ret = v.visitDefaultPre(parent, ast);
            if (typeof ret === "function") {
                ret(v);
            }
            v.visitDefaultPost(parent, ast);
        }
    }
})(ReVIEW || (ReVIEW = {}));
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var ReVIEW;
(function (ReVIEW) {
    (function (Parse) {
        function parse(input) {
            var rawResult = PEG.parse(input);
            var root = transform(rawResult).toNode();

            if (root.childNodes.length !== 0) {
                reconstruct(root.childNodes[0].toNode(), function (chapter) {
                    return chapter.headline.level;
                });
            }

            var ulistSet = [];
            ReVIEW.visit(root, {
                visitDefaultPre: function (ast) {
                    if (ast.ruleName === RuleName.Ulist) {
                        ulistSet.push(ast.toNode());
                    }
                }
            });
            ulistSet.forEach(function (ulist) {
                reconstruct(ulist, function (ulistElement) {
                    return ulistElement.level;
                });
            });

            ReVIEW.visit(root, {
                visitDefaultPre: function (ast, parent) {
                    ast.parentNode = parent;
                }
            });
            return {
                ast: root,
                cst: rawResult
            };
        }
        Parse.parse = parse;

        function transform(rawResult) {
            if (rawResult === "") {
                return null;
            }
            var rule = RuleName[rawResult.syntax];
            if (typeof rule === "undefined") {
                throw new ParseError(rawResult, "unknown rule: " + rawResult.syntax);
            }
            switch (rule) {
                case RuleName.Chapter:
                    return new ChapterSyntaxTree(rawResult);
                case RuleName.BlockElement:
                    return new BlockElementSyntaxTree(rawResult);
                case RuleName.Headline:
                    return new HeadlineSyntaxTree(rawResult);
                case RuleName.InlineElement:
                    return new InlineElementSyntaxTree(rawResult);
                case RuleName.BracketArg:
                case RuleName.BraceArg:
                    return new ArgumentSyntaxTree(rawResult);
                case RuleName.UlistElement:
                    return new UlistElementSyntaxTree(rawResult);
                case RuleName.OlistElement:
                    return new OlistElementSyntaxTree(rawResult);
                case RuleName.DlistElement:
                    return new DlistElementSyntaxTree(rawResult);
                case RuleName.ContentText:
                case RuleName.BlockElementContentText:
                case RuleName.InlineElementContentText:
                case RuleName.ContentInlineText:
                case RuleName.SinglelineComment:
                    return new TextNodeSyntaxTree(rawResult);

                case RuleName.Chapters:
                case RuleName.Paragraphs:
                case RuleName.Contents:
                case RuleName.BlockElementContents:
                case RuleName.InlineElementContents:
                case RuleName.ContentInlines:
                case RuleName.Ulist:
                case RuleName.Olist:
                case RuleName.Dlist:
                    return new NodeSyntaxTree(rawResult);

                case RuleName.Start:
                case RuleName.Paragraph:
                case RuleName.DlistElementContent:
                    return new NodeSyntaxTree(rawResult);
                case RuleName.Content:
                case RuleName.BlockElementContent:
                case RuleName.InlineElementContent:
                case RuleName.SinglelineContent:
                case RuleName.ContentInline:
                    return transform(rawResult.content);
                default:
                    return new SyntaxTree(rawResult);
            }
        }
        Parse.transform = transform;

        function reconstruct(node, pickLevel) {
            var originalChildNodes = node.childNodes;
            node.childNodes = [];

            var nodeSets = [];
            var currentSet = [];

            originalChildNodes.forEach(function (child) {
                if (currentSet.length === 0) {
                    currentSet.push(child);
                } else if (pickLevel(currentSet[0]) < pickLevel(child)) {
                    currentSet.push(child);
                } else {
                    nodeSets.push(currentSet);
                    currentSet = [];
                    currentSet.push(child);
                }
            });
            if (currentSet.length !== 0) {
                nodeSets.push(currentSet);
            }
            nodeSets.forEach(function (nodes) {
                var parent = nodes[0];
                node.childNodes.push(parent);
                nodes.splice(1).forEach(function (child) {
                    parent.childNodes.push(child);
                });
                reconstruct(parent, pickLevel);
            });
        }

        var ParseError = (function () {
            function ParseError(syntax, message) {
                this.syntax = syntax;
                this.message = message;
                if ((Error).captureStackTrace) {
                    (Error).captureStackTrace(this, ParseError);
                }
                this.name = "ParseError";
            }
            return ParseError;
        })();
        Parse.ParseError = ParseError;

        (function (RuleName) {
            RuleName[RuleName["SyntaxError"] = 0] = "SyntaxError";

            RuleName[RuleName["Start"] = 1] = "Start";
            RuleName[RuleName["Chapters"] = 2] = "Chapters";
            RuleName[RuleName["Chapter"] = 3] = "Chapter";
            RuleName[RuleName["Headline"] = 4] = "Headline";
            RuleName[RuleName["Paragraphs"] = 5] = "Paragraphs";
            RuleName[RuleName["Paragraph"] = 6] = "Paragraph";
            RuleName[RuleName["Contents"] = 7] = "Contents";
            RuleName[RuleName["Content"] = 8] = "Content";
            RuleName[RuleName["ContentText"] = 9] = "ContentText";
            RuleName[RuleName["BlockElement"] = 10] = "BlockElement";
            RuleName[RuleName["InlineElement"] = 11] = "InlineElement";
            RuleName[RuleName["BracketArg"] = 12] = "BracketArg";
            RuleName[RuleName["BraceArg"] = 13] = "BraceArg";
            RuleName[RuleName["BlockElementContents"] = 14] = "BlockElementContents";
            RuleName[RuleName["BlockElementContent"] = 15] = "BlockElementContent";
            RuleName[RuleName["BlockElementContentText"] = 16] = "BlockElementContentText";
            RuleName[RuleName["InlineElementContents"] = 17] = "InlineElementContents";
            RuleName[RuleName["InlineElementContent"] = 18] = "InlineElementContent";
            RuleName[RuleName["InlineElementContentText"] = 19] = "InlineElementContentText";
            RuleName[RuleName["SinglelineContent"] = 20] = "SinglelineContent";
            RuleName[RuleName["ContentInlines"] = 21] = "ContentInlines";
            RuleName[RuleName["ContentInline"] = 22] = "ContentInline";
            RuleName[RuleName["ContentInlineText"] = 23] = "ContentInlineText";
            RuleName[RuleName["Ulist"] = 24] = "Ulist";
            RuleName[RuleName["UlistElement"] = 25] = "UlistElement";
            RuleName[RuleName["Olist"] = 26] = "Olist";
            RuleName[RuleName["OlistElement"] = 27] = "OlistElement";
            RuleName[RuleName["Dlist"] = 28] = "Dlist";
            RuleName[RuleName["DlistElement"] = 29] = "DlistElement";
            RuleName[RuleName["DlistElementContent"] = 30] = "DlistElementContent";
            RuleName[RuleName["SinglelineComment"] = 31] = "SinglelineComment";
        })(Parse.RuleName || (Parse.RuleName = {}));
        var RuleName = Parse.RuleName;

        var SyntaxTree = (function () {
            function SyntaxTree(data) {
                this.ruleName = RuleName[data.syntax];
                if (typeof this.ruleName === "undefined") {
                    throw new ParseError(data, "unknown rule: " + data.syntax);
                }
                this.offset = data.offset;
                this.line = data.line;
                this.column = data.column;
                this.endPos = data.endPos;
            }
            SyntaxTree.prototype.toJSON = function () {
                var result = {};
                for (var k in this) {
                    if (k === "ruleName") {
                        result[k] = RuleName[this[k]];
                    } else if (k === "fqn") {
                    } else if (k !== "parentNode" && typeof this[k] !== "function") {
                        result[k] = this[k];
                    }
                }
                return result;
            };

            SyntaxTree.prototype.toString = function (indentLevel) {
                if (typeof indentLevel === "undefined") { indentLevel = 0; }
                var result = this.makeIndent(indentLevel) + "SyntaxTree:[\n";
                result += this.makeIndent(indentLevel + 1) + "offset = " + this.offset + ",\n";
                result += this.makeIndent(indentLevel + 1) + "line=" + this.line + ",\n";
                result += this.makeIndent(indentLevel + 1) + "column=" + this.column + ",\n";
                result += this.makeIndent(indentLevel + 1) + "name=" + RuleName[this.ruleName] + ",\n";
                this.toStringHook(indentLevel, result);
                result += this.makeIndent(indentLevel) + "]";

                return result;
            };

            SyntaxTree.prototype.makeIndent = function (indentLevel) {
                var indent = "";
                for (var i = 0; i < indentLevel; i++) {
                    indent += "  ";
                }
                return indent;
            };

            SyntaxTree.prototype.toStringHook = function (indentLevel, result) {
            };

            SyntaxTree.prototype.checkNumber = function (value) {
                if (typeof value !== "number") {
                    throw new Error("number required. actual:" + (typeof value) + ":" + value);
                } else {
                    return value;
                }
            };

            SyntaxTree.prototype.checkString = function (value) {
                if (typeof value !== "string") {
                    throw new Error("string required. actual:" + (typeof value) + ":" + value);
                } else {
                    return value;
                }
            };

            SyntaxTree.prototype.checkObject = function (value) {
                if (typeof value !== "object") {
                    throw new Error("object required. actual:" + (typeof value) + ":" + value);
                } else {
                    return value;
                }
            };

            SyntaxTree.prototype.checkArray = function (value) {
                if (!Array.isArray(value)) {
                    throw new Error("array required. actual:" + (typeof value) + ":" + value);
                } else {
                    return value;
                }
            };

            SyntaxTree.prototype.toOtherNode = function (clazz) {
                if (this instanceof clazz) {
                    return this;
                } else {
                    throw new Error("this node is not " + clazz.name + ", actual " + (this).constructor.name);
                }
            };

            SyntaxTree.prototype.toNode = function () {
                return this.toOtherNode(NodeSyntaxTree);
            };

            SyntaxTree.prototype.toBlockElement = function () {
                return this.toOtherNode(BlockElementSyntaxTree);
            };

            SyntaxTree.prototype.toInlineElement = function () {
                return this.toOtherNode(InlineElementSyntaxTree);
            };

            SyntaxTree.prototype.toArgument = function () {
                return this.toOtherNode(ArgumentSyntaxTree);
            };

            SyntaxTree.prototype.toChapter = function () {
                return this.toOtherNode(ChapterSyntaxTree);
            };

            SyntaxTree.prototype.toHeadline = function () {
                return this.toOtherNode(HeadlineSyntaxTree);
            };

            SyntaxTree.prototype.toUlist = function () {
                return this.toOtherNode(UlistElementSyntaxTree);
            };

            SyntaxTree.prototype.toOlist = function () {
                return this.toOtherNode(OlistElementSyntaxTree);
            };

            SyntaxTree.prototype.toDlist = function () {
                return this.toOtherNode(DlistElementSyntaxTree);
            };

            SyntaxTree.prototype.toTextNode = function () {
                return this.toOtherNode(TextNodeSyntaxTree);
            };
            return SyntaxTree;
        })();
        Parse.SyntaxTree = SyntaxTree;

        var NodeSyntaxTree = (function (_super) {
            __extends(NodeSyntaxTree, _super);
            function NodeSyntaxTree(data) {
                _super.call(this, data);
                this.childNodes = [];
                this.processChildNodes(data.content);
            }
            NodeSyntaxTree.prototype.processChildNodes = function (content) {
                var _this = this;
                if (Array.isArray(content)) {
                    content.forEach(function (rawResult) {
                        var tree = transform(rawResult);
                        if (tree) {
                            _this.childNodes.push(tree);
                        }
                    });
                } else if (content !== "" && content) {
                    (function (rawResult) {
                        var tree = transform(rawResult);
                        if (tree) {
                            _this.childNodes.push(tree);
                        }
                    })(content);
                }
            };

            NodeSyntaxTree.prototype.toStringHook = function (indentLevel, result) {
                if (this.childNodes.length !== 0) {
                    result += this.makeIndent(indentLevel + 1) + "childNodes[" + this.childNodes.length + "]=[\n";
                    this.childNodes.forEach(function (node) {
                        result += node.toString(indentLevel + 2);
                        result += "\n";
                    });
                    result += this.makeIndent(indentLevel + 1) + "]\n";
                }
            };
            return NodeSyntaxTree;
        })(SyntaxTree);
        Parse.NodeSyntaxTree = NodeSyntaxTree;

        var ChapterSyntaxTree = (function (_super) {
            __extends(ChapterSyntaxTree, _super);
            function ChapterSyntaxTree(data) {
                _super.call(this, data);

                this.headline = transform(this.checkObject(data.headline)).toHeadline();
                if (typeof data.text === "string") {
                    return;
                }
                this.text = this.checkArray(data.text.content).map(function (data) {
                    return transform(data);
                });

                delete this.childNodes;
                this.childNodes = [];
            }
            Object.defineProperty(ChapterSyntaxTree.prototype, "level", {
                get: function () {
                    return this.headline.level;
                },
                enumerable: true,
                configurable: true
            });

            Object.defineProperty(ChapterSyntaxTree.prototype, "fqn", {
                get: function () {
                    var chapters = [];
                    ReVIEW.walk(this, function (node) {
                        if (node instanceof ReVIEW.Parse.ChapterSyntaxTree) {
                            chapters.unshift(node.toChapter());
                        }
                        return node.parentNode;
                    });
                    var result = chapters.map(function (chapter) {
                        return chapter.no;
                    }).join(".");
                    return result;
                },
                enumerable: true,
                configurable: true
            });
            return ChapterSyntaxTree;
        })(NodeSyntaxTree);
        Parse.ChapterSyntaxTree = ChapterSyntaxTree;

        var HeadlineSyntaxTree = (function (_super) {
            __extends(HeadlineSyntaxTree, _super);
            function HeadlineSyntaxTree(data) {
                _super.call(this, data);

                this.level = this.checkNumber(data.level);
                if (data.cmd !== "") {
                    this.cmd = transform(this.checkObject(data.cmd)).toArgument();
                }
                if (data.label !== "") {
                    this.label = transform(this.checkObject(data.label)).toArgument();
                }
                this.caption = transform(this.checkObject(data.caption)).toNode();
            }
            return HeadlineSyntaxTree;
        })(SyntaxTree);
        Parse.HeadlineSyntaxTree = HeadlineSyntaxTree;

        var BlockElementSyntaxTree = (function (_super) {
            __extends(BlockElementSyntaxTree, _super);
            function BlockElementSyntaxTree(data) {
                _super.call(this, data);
                this.symbol = this.checkString(data.symbol);
                this.args = this.checkArray(data.args).map(function (data) {
                    return transform(data).toArgument();
                });
            }
            return BlockElementSyntaxTree;
        })(NodeSyntaxTree);
        Parse.BlockElementSyntaxTree = BlockElementSyntaxTree;

        var InlineElementSyntaxTree = (function (_super) {
            __extends(InlineElementSyntaxTree, _super);
            function InlineElementSyntaxTree(data) {
                _super.call(this, data);
                this.symbol = this.checkString(data.symbol);
            }
            return InlineElementSyntaxTree;
        })(NodeSyntaxTree);
        Parse.InlineElementSyntaxTree = InlineElementSyntaxTree;

        var ArgumentSyntaxTree = (function (_super) {
            __extends(ArgumentSyntaxTree, _super);
            function ArgumentSyntaxTree(data) {
                _super.call(this, data);
                this.arg = this.checkString(data.arg);
            }
            return ArgumentSyntaxTree;
        })(SyntaxTree);
        Parse.ArgumentSyntaxTree = ArgumentSyntaxTree;

        var UlistElementSyntaxTree = (function (_super) {
            __extends(UlistElementSyntaxTree, _super);
            function UlistElementSyntaxTree(data) {
                _super.call(this, data);
                this.level = this.checkNumber(data.level);
                this.text = transform(this.checkObject(data.text));

                delete this.childNodes;
                this.childNodes = [];
            }
            return UlistElementSyntaxTree;
        })(NodeSyntaxTree);
        Parse.UlistElementSyntaxTree = UlistElementSyntaxTree;

        var OlistElementSyntaxTree = (function (_super) {
            __extends(OlistElementSyntaxTree, _super);
            function OlistElementSyntaxTree(data) {
                _super.call(this, data);
                this.no = this.checkNumber(data.no);
                this.text = transform(this.checkObject(data.text));
            }
            return OlistElementSyntaxTree;
        })(SyntaxTree);
        Parse.OlistElementSyntaxTree = OlistElementSyntaxTree;

        var DlistElementSyntaxTree = (function (_super) {
            __extends(DlistElementSyntaxTree, _super);
            function DlistElementSyntaxTree(data) {
                _super.call(this, data);
                this.text = transform(this.checkObject(data.text));
                this.content = transform(this.checkObject(data.content));
            }
            return DlistElementSyntaxTree;
        })(SyntaxTree);
        Parse.DlistElementSyntaxTree = DlistElementSyntaxTree;

        var TextNodeSyntaxTree = (function (_super) {
            __extends(TextNodeSyntaxTree, _super);
            function TextNodeSyntaxTree(data) {
                _super.call(this, data);
                this.text = this.checkString(data.text);
            }
            return TextNodeSyntaxTree;
        })(SyntaxTree);
        Parse.TextNodeSyntaxTree = TextNodeSyntaxTree;
    })(ReVIEW.Parse || (ReVIEW.Parse = {}));
    var Parse = ReVIEW.Parse;
})(ReVIEW || (ReVIEW = {}));
var ReVIEW;
(function (ReVIEW) {
    (function (Build) {
        var t = ReVIEW.i18n.t;

        var SyntaxTree = ReVIEW.Parse.SyntaxTree;
        var NodeSyntaxTree = ReVIEW.Parse.NodeSyntaxTree;
        var BlockElementSyntaxTree = ReVIEW.Parse.BlockElementSyntaxTree;
        var InlineElementSyntaxTree = ReVIEW.Parse.InlineElementSyntaxTree;
        var HeadlineSyntaxTree = ReVIEW.Parse.HeadlineSyntaxTree;
        var TextNodeSyntaxTree = ReVIEW.Parse.TextNodeSyntaxTree;
        var ChapterSyntaxTree = ReVIEW.Parse.ChapterSyntaxTree;

        (function (SyntaxType) {
            SyntaxType[SyntaxType["Block"] = 0] = "Block";
            SyntaxType[SyntaxType["Inline"] = 1] = "Inline";
            SyntaxType[SyntaxType["Other"] = 2] = "Other";
        })(Build.SyntaxType || (Build.SyntaxType = {}));
        var SyntaxType = Build.SyntaxType;

        var AcceptableSyntaxes = (function () {
            function AcceptableSyntaxes(acceptableSyntaxes) {
                this.acceptableSyntaxes = acceptableSyntaxes;
            }
            AcceptableSyntaxes.prototype.find = function (node) {
                var results;
                if (node instanceof ReVIEW.Parse.InlineElementSyntaxTree) {
                    var inline = node.toInlineElement();
                    results = this.inlines.filter(function (s) {
                        return s.symbolName === inline.symbol;
                    });
                } else if (node instanceof ReVIEW.Parse.BlockElementSyntaxTree) {
                    var block = node.toBlockElement();
                    results = this.blocks.filter(function (s) {
                        return s.symbolName === block.symbol;
                    });
                } else {
                    results = this.others.filter(function (s) {
                        return node instanceof s.clazz;
                    });
                }
                return results;
            };

            Object.defineProperty(AcceptableSyntaxes.prototype, "inlines", {
                get: function () {
                    return this.acceptableSyntaxes.filter(function (s) {
                        return s.type === SyntaxType.Inline;
                    });
                },
                enumerable: true,
                configurable: true
            });

            Object.defineProperty(AcceptableSyntaxes.prototype, "blocks", {
                get: function () {
                    return this.acceptableSyntaxes.filter(function (s) {
                        return s.type === SyntaxType.Block;
                    });
                },
                enumerable: true,
                configurable: true
            });

            Object.defineProperty(AcceptableSyntaxes.prototype, "others", {
                get: function () {
                    return this.acceptableSyntaxes.filter(function (s) {
                        return s.type === SyntaxType.Other;
                    });
                },
                enumerable: true,
                configurable: true
            });

            AcceptableSyntaxes.prototype.toJSON = function () {
                return {
                    "rev": "1",
                    "SyntaxType": SyntaxType,
                    "acceptableSyntaxes": this.acceptableSyntaxes
                };
            };
            return AcceptableSyntaxes;
        })();
        Build.AcceptableSyntaxes = AcceptableSyntaxes;

        var AcceptableSyntax = (function () {
            function AcceptableSyntax() {
                this.argsLength = [];
            }
            AcceptableSyntax.prototype.toJSON = function () {
                return {
                    "type": this.type,
                    "class": this.clazz ? this.clazz.name : void 0,
                    "symbolName": this.symbolName,
                    "argsLength": this.argsLength.length !== 0 ? this.argsLength : (void 0),
                    "description": this.description
                };
            };
            return AcceptableSyntax;
        })();
        Build.AcceptableSyntax = AcceptableSyntax;

        var AnalyzerError = (function () {
            function AnalyzerError(message) {
                this.message = message;
                this.name = "AnalyzerError";
                var E = Error;
                if (E.captureStackTrace) {
                    E.captureStackTrace(this, AnalyzerError);
                }
            }
            return AnalyzerError;
        })();
        Build.AnalyzerError = AnalyzerError;

        var AnalyzeProcess = (function () {
            function AnalyzeProcess() {
                this.acceptableSyntaxes = [];
            }
            AnalyzeProcess.prototype.prepare = function () {
                this.current = new AcceptableSyntax();
            };

            AnalyzeProcess.prototype.build = function (methodName) {
                if (methodName.indexOf("block_") === 0) {
                    this.current.type = this.current.type || SyntaxType.Block;
                    this.current.symbolName = this.current.symbolName || methodName.substring("block_".length);
                } else if (methodName.indexOf("inline_") === 0) {
                    this.current.type = this.current.type || SyntaxType.Inline;
                    this.current.symbolName = this.current.symbolName || methodName.substring("inline_".length);
                } else {
                    this.current.type = this.current.type || SyntaxType.Other;
                    this.current.symbolName = this.current.symbolName || methodName;
                }

                switch (this.current.type) {
                    case SyntaxType.Block:
                        if (this.current.argsLength.length === 0) {
                            throw new AnalyzerError("must call builder.checkArgsLength(...number[]) in " + methodName);
                        }
                        break;
                    case SyntaxType.Other:
                        if (!this.current.clazz) {
                            throw new AnalyzerError("must call builder.setClass(class) in " + methodName);
                        }
                        break;
                    case SyntaxType.Inline:
                        break;
                }
                if (!this.current.description) {
                    throw new AnalyzerError("must call builder.setDescription(string) in " + methodName);
                }
                if (!this.current.process) {
                    throw new AnalyzerError("must call builder.processNode(func) in " + methodName);
                }

                this.acceptableSyntaxes.push(this.current);
            };

            AnalyzeProcess.prototype.setSyntaxType = function (type) {
                this.current.type = type;
            };

            AnalyzeProcess.prototype.setClass = function (clazz) {
                this.current.clazz = clazz;
            };

            AnalyzeProcess.prototype.setSymbol = function (symbolName) {
                this.current.symbolName = symbolName;
            };

            AnalyzeProcess.prototype.setDescription = function (description) {
                this.current.description = description;
            };

            AnalyzeProcess.prototype.checkArgsLength = function () {
                var argsLength = [];
                for (var _i = 0; _i < (arguments.length - 0); _i++) {
                    argsLength[_i] = arguments[_i + 0];
                }
                this.current.argsLength = argsLength;
            };

            AnalyzeProcess.prototype.processNode = function (func) {
                this.current.process = func;
            };
            return AnalyzeProcess;
        })();

        var DefaultAnalyzer = (function () {
            function DefaultAnalyzer() {
            }
            DefaultAnalyzer.prototype.getAcceptableSyntaxes = function () {
                if (!this._acceptableSyntaxes) {
                    this._acceptableSyntaxes = this.constructAcceptableSyntaxes();
                }
                return new AcceptableSyntaxes(this._acceptableSyntaxes);
            };

            DefaultAnalyzer.prototype.constructAcceptableSyntaxes = function () {
                var process = new AnalyzeProcess();

                for (var k in this) {
                    if (typeof this[k] !== "function") {
                        continue;
                    }
                    var func = null;
                    if (k.indexOf("block_") === 0) {
                        func = this[k];
                    } else if (k.indexOf("inline_") === 0) {
                        func = this[k];
                    } else if (k === "headline") {
                        func = this[k];
                    }
                    if (func) {
                        process.prepare();
                        func(process);
                        process.build(k);
                    }
                }

                return process.acceptableSyntaxes;
            };

            DefaultAnalyzer.prototype.headline = function (builder) {
                builder.setSyntaxType(SyntaxType.Other);
                builder.setClass(ReVIEW.Parse.HeadlineSyntaxTree);
                builder.setDescription(t("description.headline"));
                builder.processNode(function (process, n) {
                    var node = n.toHeadline();
                    var label = null;
                    if (node.label) {
                        label = node.label.arg;
                    } else if (node.caption.childNodes.length === 1) {
                        var textNode = node.caption.childNodes[0].toTextNode();
                        label = textNode.text;
                    }
                    process.addSymbol({
                        symbolName: "hd",
                        labelName: label,
                        node: node
                    });
                });
            };

            DefaultAnalyzer.prototype.block_list = function (builder) {
                builder.setSyntaxType(SyntaxType.Block);
                builder.setSymbol("list");
                builder.setDescription(t("description.block_list"));
                builder.checkArgsLength(2);
                builder.processNode(function (process, n) {
                    var node = n.toBlockElement();
                    node.no = process.nextIndex("list");
                    process.addSymbol({
                        symbolName: node.symbol,
                        labelName: node.args[0].arg,
                        node: node
                    });
                });
            };

            DefaultAnalyzer.prototype.inline_list = function (builder) {
                builder.setSyntaxType(SyntaxType.Inline);
                builder.setSymbol("list");
                builder.setDescription(t("description.inline_list"));
                builder.processNode(function (process, n) {
                    var node = n.toInlineElement();
                    process.addSymbol({
                        symbolName: node.symbol,
                        referenceTo: process.constructReferenceTo(node, ReVIEW.nodeContentToString(process, node)),
                        node: node
                    });
                });
            };

            DefaultAnalyzer.prototype.inline_hd = function (builder) {
                builder.setSyntaxType(SyntaxType.Inline);
                builder.setSymbol("hd");
                builder.setDescription(t("description.inline_hd"));
                builder.processNode(function (process, n) {
                    var node = n.toInlineElement();
                    process.addSymbol({
                        symbolName: node.symbol,
                        referenceTo: process.constructReferenceTo(node, ReVIEW.nodeContentToString(process, node)),
                        node: node
                    });
                });
            };

            DefaultAnalyzer.prototype.inline_br = function (builder) {
                builder.setSyntaxType(SyntaxType.Inline);
                builder.setSymbol("br");
                builder.setDescription(t("description.inline_br"));
                builder.processNode(function (process, n) {
                    var node = n.toInlineElement();
                    process.addSymbol({
                        symbolName: node.symbol,
                        node: node
                    });
                });
            };
            return DefaultAnalyzer;
        })();
        Build.DefaultAnalyzer = DefaultAnalyzer;
    })(ReVIEW.Build || (ReVIEW.Build = {}));
    var Build = ReVIEW.Build;
})(ReVIEW || (ReVIEW = {}));
var ReVIEW;
(function (ReVIEW) {
    (function (Build) {
        var SyntaxTree = ReVIEW.Parse.SyntaxTree;
        var NodeSyntaxTree = ReVIEW.Parse.NodeSyntaxTree;
        var BlockElementSyntaxTree = ReVIEW.Parse.BlockElementSyntaxTree;
        var InlineElementSyntaxTree = ReVIEW.Parse.InlineElementSyntaxTree;
        var HeadlineSyntaxTree = ReVIEW.Parse.HeadlineSyntaxTree;
        var TextNodeSyntaxTree = ReVIEW.Parse.TextNodeSyntaxTree;
        var ChapterSyntaxTree = ReVIEW.Parse.ChapterSyntaxTree;

        var DefaultBuilder = (function () {
            function DefaultBuilder() {
            }
            Object.defineProperty(DefaultBuilder.prototype, "name", {
                get: function () {
                    return (this).constructor.name;
                },
                enumerable: true,
                configurable: true
            });

            DefaultBuilder.prototype.init = function (book) {
                var _this = this;
                this.book = book;

                book.parts.forEach(function (part) {
                    part.chapters.forEach(function (chapter) {
                        var process = chapter.createBuilderProcess(_this);
                        ReVIEW.visit(chapter.root, {
                            visitDefaultPre: function (node) {
                            },
                            visitChapterPre: function (node) {
                                return _this.chapterPre(process, node);
                            },
                            visitChapterPost: function (node) {
                                return _this.chapterPost(process, node);
                            },
                            visitHeadlinePre: function (node) {
                                return _this.headlinePre(process, "hd", node);
                            },
                            visitHeadlinePost: function (node) {
                                return _this.headlinePost(process, "hd", node);
                            },
                            visitBlockElementPre: function (node) {
                                return _this.blockPre(process, node.symbol, node);
                            },
                            visitBlockElementPost: function (node) {
                                return _this.blockPost(process, node.symbol, node);
                            },
                            visitInlineElementPre: function (node) {
                                return _this.inlinePre(process, node.symbol, node);
                            },
                            visitInlineElementPost: function (node) {
                                return _this.inlinePost(process, node.symbol, node);
                            },
                            visitTextPre: function (node) {
                                _this.text(process, node.text, node);
                            }
                        });
                    });
                });
                book.parts.forEach(function (part) {
                    part.chapters.forEach(function (chapter) {
                        chapter.process.doAfterProcess();
                    });
                });
            };

            DefaultBuilder.prototype.chapterPre = function (process, node) {
            };

            DefaultBuilder.prototype.chapterPost = function (process, node) {
            };

            DefaultBuilder.prototype.headlinePre = function (process, name, node) {
            };

            DefaultBuilder.prototype.headlinePost = function (process, name, node) {
            };

            DefaultBuilder.prototype.text = function (process, name, node) {
                process.out(node.text);
            };

            DefaultBuilder.prototype.blockPre = function (process, name, node) {
                var func;
                func = this["block_" + name];
                if (typeof func === "function") {
                    return func.call(this, process, node);
                }

                func = this["block_" + name + "_pre"];
                if (typeof func !== "function") {
                    throw new Build.AnalyzerError("block_" + name + "_pre or block_" + name + " is not Function");
                }
                return func.call(this, process, node);
            };

            DefaultBuilder.prototype.blockPost = function (process, name, node) {
                var func;
                func = this["block_" + name];
                if (typeof func === "function") {
                    return;
                }

                func = this["block_" + name + "_post"];
                if (typeof func !== "function") {
                    throw new Build.AnalyzerError("block_" + name + "_post is not Function");
                }
                return func.call(this, process, node);
            };

            DefaultBuilder.prototype.inlinePre = function (process, name, node) {
                var func;
                func = this["inline_" + name];
                if (typeof func === "function") {
                    return func.call(this, process, node);
                }

                func = this["inline_" + name + "_pre"];
                if (typeof func !== "function") {
                    throw new Build.AnalyzerError("inline_" + name + "_pre or inline_" + name + " is not Function");
                }
                return func.call(this, process, node);
            };

            DefaultBuilder.prototype.inlinePost = function (process, name, node) {
                var func;
                func = this["inline_" + name];
                if (typeof func === "function") {
                    return;
                }

                func = this["inline_" + name + "_post"];
                if (typeof func !== "function") {
                    throw new Build.AnalyzerError("inline_" + name + "_post is not Function");
                }
                return func.call(this, process, node);
            };

            DefaultBuilder.prototype.findReference = function (process, node) {
                var founds = process.symbols.filter(function (symbol) {
                    return symbol.node === node;
                });
                if (founds.length !== 1) {
                    throw new Build.AnalyzerError("invalid status.");
                }
                return founds[0];
            };
            return DefaultBuilder;
        })();
        Build.DefaultBuilder = DefaultBuilder;
    })(ReVIEW.Build || (ReVIEW.Build = {}));
    var Build = ReVIEW.Build;
})(ReVIEW || (ReVIEW = {}));
var ReVIEW;
(function (ReVIEW) {
    var t = ReVIEW.i18n.t;

    (function (ReportLevel) {
        ReportLevel[ReportLevel["Info"] = 0] = "Info";
        ReportLevel[ReportLevel["Warning"] = 1] = "Warning";
        ReportLevel[ReportLevel["Error"] = 2] = "Error";
    })(ReVIEW.ReportLevel || (ReVIEW.ReportLevel = {}));
    var ReportLevel = ReVIEW.ReportLevel;

    var ProcessReport = (function () {
        function ProcessReport(level, part, chapter, message, nodes) {
            if (typeof nodes === "undefined") { nodes = []; }
            this.level = level;
            this.part = part;
            this.chapter = chapter;
            this.message = message;
            this.nodes = nodes;
        }
        return ProcessReport;
    })();
    ReVIEW.ProcessReport = ProcessReport;

    var Process = (function () {
        function Process(part, chapter, input) {
            this.part = part;
            this.chapter = chapter;
            this.input = input;
            this.symbols = [];
            this.indexCounter = {};
            this.afterProcess = [];
            this._reports = [];
        }
        Process.prototype.info = function (message) {
            var nodes = [];
            for (var _i = 0; _i < (arguments.length - 1); _i++) {
                nodes[_i] = arguments[_i + 1];
            }
            this._reports.push(new ProcessReport(ReportLevel.Info, this.part, this.chapter, message, nodes));
        };

        Process.prototype.warn = function (message) {
            var nodes = [];
            for (var _i = 0; _i < (arguments.length - 1); _i++) {
                nodes[_i] = arguments[_i + 1];
            }
            this._reports.push(new ProcessReport(ReportLevel.Warning, this.part, this.chapter, message, nodes));
        };

        Process.prototype.error = function (message) {
            var nodes = [];
            for (var _i = 0; _i < (arguments.length - 1); _i++) {
                nodes[_i] = arguments[_i + 1];
            }
            this._reports.push(new ProcessReport(ReportLevel.Error, this.part, this.chapter, message, nodes));
        };

        Process.prototype.nextIndex = function (kind) {
            var nextIndex = this.indexCounter[kind];
            if (typeof nextIndex === "undefined") {
                nextIndex = 1;
            } else {
                nextIndex++;
            }
            this.indexCounter[kind] = nextIndex;
            return nextIndex;
        };

        Object.defineProperty(Process.prototype, "reports", {
            get: function () {
                return this._reports.sort(function (a, b) {
                    if (a.nodes.length === 0 && b.nodes.length === 0) {
                        return 0;
                    } else if (a.nodes.length === 0) {
                        return -1;
                    } else if (b.nodes.length === 0) {
                        return 1;
                    } else {
                        return a.nodes[0].offset - b.nodes[0].offset;
                    }
                });
            },
            enumerable: true,
            configurable: true
        });

        Process.prototype.addSymbol = function (symbol) {
            symbol.part = this.part;
            symbol.chapter = this.chapter;
            this.symbols.push(symbol);
        };

        Object.defineProperty(Process.prototype, "missingSymbols", {
            get: function () {
                var result = [];
                this.symbols.forEach(function (symbol) {
                    if (symbol.referenceTo && !symbol.referenceTo.referenceNode) {
                        result.push(symbol);
                    }
                });
                return result;
            },
            enumerable: true,
            configurable: true
        });

        Process.prototype.constructReferenceTo = function (node, value, targetSymbol, separator) {
            if (typeof targetSymbol === "undefined") { targetSymbol = node.symbol; }
            if (typeof separator === "undefined") { separator = "|"; }
            var splitted = value.split(separator);
            if (splitted.length === 3) {
                return {
                    partName: splitted[0],
                    chapterName: splitted[1],
                    targetSymbol: targetSymbol,
                    label: splitted[2]
                };
            } else if (splitted.length === 2) {
                return {
                    part: this.part,
                    partName: this.part.name,
                    chapterName: splitted[0],
                    targetSymbol: targetSymbol,
                    label: splitted[1]
                };
            } else if (splitted.length === 1) {
                return {
                    part: this.part,
                    partName: this.part.name,
                    chapter: this.chapter,
                    chapterName: this.chapter.name,
                    targetSymbol: targetSymbol,
                    label: splitted[0]
                };
            } else {
                var message = t("compile.args_length_mismatch", "1 or 2 or 3", splitted.length);
                this.error(message, node);
                return null;
            }
        };

        Process.prototype.addAfterProcess = function (func) {
            this.afterProcess.push(func);
        };

        Process.prototype.doAfterProcess = function () {
            this.afterProcess.forEach(function (func) {
                return func();
            });
            this.afterProcess = [];
        };
        return Process;
    })();
    ReVIEW.Process = Process;

    var BuilderProcess = (function () {
        function BuilderProcess(builder, base) {
            this.builder = builder;
            this.base = base;
            this.result = "";
        }
        Object.defineProperty(BuilderProcess.prototype, "info", {
            get: function () {
                return this.base.info;
            },
            enumerable: true,
            configurable: true
        });

        Object.defineProperty(BuilderProcess.prototype, "warn", {
            get: function () {
                return this.base.warn;
            },
            enumerable: true,
            configurable: true
        });

        Object.defineProperty(BuilderProcess.prototype, "error", {
            get: function () {
                return this.base.error;
            },
            enumerable: true,
            configurable: true
        });

        BuilderProcess.prototype.out = function (data) {
            this.result += data;
            return this;
        };

        Object.defineProperty(BuilderProcess.prototype, "input", {
            get: function () {
                return this.base.input;
            },
            enumerable: true,
            configurable: true
        });

        Object.defineProperty(BuilderProcess.prototype, "symbols", {
            get: function () {
                return this.base.symbols;
            },
            enumerable: true,
            configurable: true
        });
        return BuilderProcess;
    })();
    ReVIEW.BuilderProcess = BuilderProcess;

    var Book = (function () {
        function Book(config) {
            this.config = config;
            this.parts = [];
        }
        Object.defineProperty(Book.prototype, "reports", {
            get: function () {
                var flatten = function (data) {
                    if (data.some(function (d) {
                        return Array.isArray(d);
                    })) {
                        return flatten(data.reduce(function (p, c) {
                            return p.concat(c);
                        }, []));
                    } else {
                        return data;
                    }
                };
                return flatten(this.parts.map(function (part) {
                    return part.chapters.map(function (chapter) {
                        return chapter.process.reports;
                    });
                }));
            },
            enumerable: true,
            configurable: true
        });
        return Book;
    })();
    ReVIEW.Book = Book;

    var Part = (function () {
        function Part(parent, no, name) {
            this.parent = parent;
            this.no = no;
            this.name = name;
        }
        return Part;
    })();
    ReVIEW.Part = Part;

    var Chapter = (function () {
        function Chapter(parent, no, name, input, root) {
            this.parent = parent;
            this.no = no;
            this.name = name;
            this.input = input;
            this.root = root;
            this.builderProcesses = [];
            this.process = new Process(this.parent, this, input);
        }
        Chapter.prototype.createBuilderProcess = function (builder) {
            var builderProcess = new BuilderProcess(builder, this.process);
            this.builderProcesses.push(builderProcess);
            return builderProcess;
        };

        Chapter.prototype.findResultByBuilder = function (builder) {
            var founds;
            if (typeof builder === "string") {
                founds = this.builderProcesses.filter(function (process) {
                    return process.builder.name === builder;
                });
            } else {
                founds = this.builderProcesses.filter(function (process) {
                    return process.builder === builder;
                });
            }

            return founds[0].result;
        };
        return Chapter;
    })();
    ReVIEW.Chapter = Chapter;
})(ReVIEW || (ReVIEW = {}));
var ReVIEW;
(function (ReVIEW) {
    var t = ReVIEW.i18n.t;

    var SyntaxTree = ReVIEW.Parse.SyntaxTree;
    var HeadlineSyntaxTree = ReVIEW.Parse.HeadlineSyntaxTree;
    var BlockElementSyntaxTree = ReVIEW.Parse.BlockElementSyntaxTree;
    var InlineElementSyntaxTree = ReVIEW.Parse.InlineElementSyntaxTree;
    var TextNodeSyntaxTree = ReVIEW.Parse.TextNodeSyntaxTree;
    var ChapterSyntaxTree = ReVIEW.Parse.ChapterSyntaxTree;

    var flatten = ReVIEW.flatten;

    var Controller = (function () {
        function Controller(options) {
            if (typeof options === "undefined") { options = {}; }
            this.options = options;
        }
        Controller.prototype.initConfig = function (data) {
            this.config = data;

            data.analyzer = data.analyzer || new ReVIEW.Build.DefaultAnalyzer();

            if (!data.validators || data.validators.length === 0) {
                this.config.validators = [new ReVIEW.Build.DefaultValidator()];
            } else if (!Array.isArray(data.validators)) {
                this.config.validators = [data.validators];
            }

            if (!data.builders || data.builders.length === 0) {
                this.config.builders = [new ReVIEW.Build.DefaultBuilder()];
            } else if (!Array.isArray(data.builders)) {
                this.config.builders = [data.builders];
            }
        };

        Controller.prototype.process = function () {
            var _this = this;
            var acceptableSyntaxes = this.config.analyzer.getAcceptableSyntaxes();

            if (this.config.listener && this.config.listener.onAcceptables) {
                if (this.config.listener.onAcceptables(acceptableSyntaxes) === false) {
                    return null;
                }
            }

            var book = this.processBook();
            this.config.validators.forEach(function (validator) {
                validator.start(book, acceptableSyntaxes, _this.config.builders);
            });
            if (book.reports.some(function (report) {
                return report.level === ReVIEW.ReportLevel.Error;
            })) {
                this.outputReport(book.reports);
                return book;
            }

            if (this.config.listener && this.config.listener.onSymbols) {
                var symbols = flatten(book.parts.map(function (part) {
                    return part.chapters.map(function (chapter) {
                        return chapter.process.symbols;
                    });
                }));
                if (this.config.listener.onSymbols(symbols) === false) {
                    return null;
                }
            }

            this.config.builders.forEach(function (builder) {
                builder.init(book);
            });

            this.outputReport(book.reports);

            this.compileFinished(book);

            return book;
        };

        Controller.prototype.processBook = function () {
            var _this = this;
            var book = new ReVIEW.Book(this.config);
            book.parts = Object.keys(this.config.book).map(function (key, index) {
                var chapters = _this.config.book[key];
                return _this.processPart(book, index, key, chapters);
            });

            book.parts.forEach(function (part) {
                var chapters = [];
                part.chapters.forEach(function (chapter) {
                    ReVIEW.visit(chapter.root, {
                        visitDefaultPre: function (node) {
                        },
                        visitChapterPre: function (node) {
                            chapters.push(node);
                        }
                    });
                });
                var counter = {};
                var max = 0;
                var currentLevel = 0;
                chapters.forEach(function (chapter) {
                    var level = chapter.headline.level;
                    max = Math.max(max, level);
                    if (currentLevel > level) {
                        for (var i = level + 1; i <= max; i++) {
                            counter[i] = 0;
                        }
                    } else if (currentLevel < level) {
                        for (var i = level; i <= max; i++) {
                            counter[i] = 0;
                        }
                    }
                    currentLevel = level;
                    counter[level] += 1;
                    chapter.no = counter[level];
                });
            });
            return book;
        };

        Controller.prototype.processPart = function (book, index, name, chapters) {
            if (typeof chapters === "undefined") { chapters = []; }
            var _this = this;
            var part = new ReVIEW.Part(book, index + 1, name);
            part.chapters = chapters.map(function (chapter, index) {
                return _this.processChapter(book, part, index, chapter);
            });
            return part;
        };

        Controller.prototype.processChapter = function (book, part, index, chapterPath) {
            var resolvedPath = this.resolvePath(chapterPath);
            var data = this.read(resolvedPath);
            if (!data) {
                var chapter = new ReVIEW.Chapter(part, index + 1, chapterPath, data, null);
                chapter.process.error(t("compile.file_not_exists", resolvedPath));
                return chapter;
            }
            try  {
                var parseResult = ReVIEW.Parse.parse(data);
                var chapter = new ReVIEW.Chapter(part, index + 1, chapterPath, data, parseResult.ast);
            } catch (e) {
                if (!(e instanceof PEG.SyntaxError)) {
                    throw e;
                }
                var se = e;
                var errorNode = new SyntaxTree({
                    syntax: se.name,
                    line: se.line,
                    column: se.column,
                    offset: se.offset,
                    endPos: -1
                });
                var chapter = new ReVIEW.Chapter(part, index + 1, chapterPath, data, null);
                chapter.process.error(se.message, errorNode);
            }
            return chapter;
        };

        Object.defineProperty(Controller.prototype, "read", {
            get: function () {
                return this.config.read || ReVIEW.IO.read;
            },
            enumerable: true,
            configurable: true
        });

        Object.defineProperty(Controller.prototype, "write", {
            get: function () {
                return this.config.write || ReVIEW.IO.write;
            },
            enumerable: true,
            configurable: true
        });

        Object.defineProperty(Controller.prototype, "outputReport", {
            get: function () {
                if (this.config.listener && this.config.listener.onReports) {
                    return this.config.listener.onReports;
                } else if (ReVIEW.isNodeJS()) {
                    return this.outputReportNodeJS;
                } else {
                    return this.outputReportBrowser;
                }
            },
            enumerable: true,
            configurable: true
        });

        Controller.prototype.outputReportNodeJS = function (reports) {
            var colors = require("colors");
            colors.setTheme({
                info: "cyan",
                warn: "yellow",
                error: "red"
            });

            reports.forEach(function (report) {
                var message = "";
                message += report.chapter.name + " ";
                report.nodes.forEach(function (node) {
                    message += "[" + node.line + "," + node.column + "] ";
                });
                message += report.message;
                if (report.level === ReVIEW.ReportLevel.Error) {
                    console.warn(message.error);
                } else if (report.level === ReVIEW.ReportLevel.Warning) {
                    console.error(message.warn);
                } else if (report.level === ReVIEW.ReportLevel.Info) {
                    console.info(message.info);
                } else {
                    throw new Error("unknown report level.");
                }
            });
        };

        Controller.prototype.outputReportBrowser = function (reports) {
            reports.forEach(function (report) {
                var message = "";
                message += report.chapter.name + " ";
                report.nodes.forEach(function (node) {
                    message += "[" + node.line + "," + node.column + "] ";
                });
                message += report.message;
                if (report.level === ReVIEW.ReportLevel.Error) {
                    console.warn(message);
                } else if (report.level === ReVIEW.ReportLevel.Warning) {
                    console.error(message);
                } else if (report.level === ReVIEW.ReportLevel.Info) {
                    console.info(message);
                } else {
                    throw new Error("unknown report level.");
                }
            });
        };

        Controller.prototype.compileFinished = function (book) {
            var func = function () {
            };
            if (!book.reports.some(function (report) {
                return report.level === ReVIEW.ReportLevel.Error;
            })) {
                if (this.config.listener && this.config.listener.onCompileSuccess) {
                    func = this.config.listener.onCompileSuccess;
                } else if (ReVIEW.isNodeJS()) {
                    func = function () {
                        process.exit(0);
                    };
                }
            } else {
                if (this.config.listener && this.config.listener.onCompileFailed) {
                    func = this.config.listener.onCompileFailed;
                } else if (ReVIEW.isNodeJS()) {
                    func = function () {
                        process.exit(1);
                    };
                }
            }
            func(book);
        };

        Controller.prototype.resolvePath = function (path) {
            if (ReVIEW.isNodeJS()) {
                var p = require("path");
                var base = this.options.base || "./";
                return p.join(base, path);
            }

            if (!this.options.base) {
                return path;
            }

            if (!this.endWith(base, "/") && !this.startWith(path, "/")) {
                base += "/";
            }
            return base + path;
        };

        Controller.prototype.startWith = function (str, target) {
            return str.indexOf(target) === 0;
        };

        Controller.prototype.endWith = function (str, target) {
            return str.indexOf(target, str.length - target.length) !== -1;
        };
        return Controller;
    })();
    ReVIEW.Controller = Controller;
})(ReVIEW || (ReVIEW = {}));
var ReVIEW;
(function (ReVIEW) {
    (function (Build) {
        var t = ReVIEW.i18n.t;

        var SyntaxTree = ReVIEW.Parse.SyntaxTree;
        var ChapterSyntaxTree = ReVIEW.Parse.ChapterSyntaxTree;
        var HeadlineSyntaxTree = ReVIEW.Parse.HeadlineSyntaxTree;
        var BlockElementSyntaxTree = ReVIEW.Parse.BlockElementSyntaxTree;
        var InlineElementSyntaxTree = ReVIEW.Parse.InlineElementSyntaxTree;

        var DefaultValidator = (function () {
            function DefaultValidator() {
            }
            DefaultValidator.prototype.start = function (book, acceptableSyntaxes, builders) {
                this.acceptableSyntaxes = acceptableSyntaxes;
                this.builders = builders;

                this.checkBook(book);
                this.resolveSymbolAndReference(book);
            };

            DefaultValidator.prototype.checkBook = function (book) {
                var _this = this;
                book.parts.forEach(function (part) {
                    return _this.checkPart(part);
                });
            };

            DefaultValidator.prototype.checkPart = function (part) {
                var _this = this;
                part.chapters.forEach(function (chapter) {
                    return _this.checkChapter(chapter);
                });
            };

            DefaultValidator.prototype.checkChapter = function (chapter) {
                var _this = this;
                ReVIEW.visit(chapter.root, {
                    visitDefaultPre: function (node) {
                    },
                    visitHeadlinePre: function (node) {
                        var results = _this.acceptableSyntaxes.find(node);
                        if (results.length !== 1) {
                            chapter.process.error(t("compile.syntax_definietion_error"), node);
                            return;
                        }
                        return results[0].process(chapter.process, node);
                    },
                    visitBlockElementPre: function (node) {
                        var results = _this.acceptableSyntaxes.find(node);
                        if (results.length !== 1) {
                            chapter.process.error(t("compile.syntax_definietion_error"), node);
                            return;
                        }
                        var expects = results[0].argsLength;
                        var arg = node.args || [];
                        if (expects.indexOf(arg.length) === -1) {
                            var expected = expects.map(function (n) {
                                return Number(n).toString();
                            }).join(" or ");
                            var message = t("compile.args_length_mismatch", expected, arg.length);
                            chapter.process.error(message, node);
                            return;
                        }

                        return results[0].process(chapter.process, node);
                    },
                    visitInlineElementPre: function (node) {
                        var results = _this.acceptableSyntaxes.find(node);
                        if (results.length !== 1) {
                            chapter.process.error(t("compile.syntax_definietion_error"), node);
                            return;
                        }
                        return results[0].process(chapter.process, node);
                    }
                });

                ReVIEW.visit(chapter.root, {
                    visitDefaultPre: function (node) {
                    },
                    visitChapterPre: function (node) {
                        if (node.level === 1) {
                            if (!ReVIEW.findChapter(node)) {
                                chapter.process.error(t("compile.chapter_not_toplevel"), node);
                            }
                        } else {
                            var parent = ReVIEW.findChapter(node.parentNode);
                            if (!parent) {
                                chapter.process.error(t("compile.chapter_topleve_eq1"), node);
                            } else if (parent.level !== node.level - 1) {
                                chapter.process.error(t("compile.chapter_level_omission", node.level, node.level - 1, parent ? String(parent.level) : "none"), node);
                            }
                        }
                    }
                });
            };

            DefaultValidator.prototype.resolveSymbolAndReference = function (book) {
                var symbols = ReVIEW.flatten(book.parts.map(function (part) {
                    return part.chapters.map(function (chapter) {
                        return chapter.process.symbols;
                    });
                }));
                symbols.forEach(function (symbol) {
                    var referenceTo = symbol.referenceTo;
                    if (!referenceTo) {
                        return;
                    }
                    if (!referenceTo.part) {
                        book.parts.forEach(function (part) {
                            if (referenceTo.partName === part.name) {
                                referenceTo.part = part;
                            }
                        });
                    }
                    if (!referenceTo.part) {
                        symbol.chapter.process.error(t("compile.part_is_missing", symbol.part.name), symbol.node);
                        return;
                    }
                    if (!referenceTo.chapter) {
                        referenceTo.part.chapters.forEach(function (chap) {
                            if (referenceTo.chapterName === chap.name) {
                                referenceTo.chapter = chap;
                            }
                        });
                    }
                    if (!referenceTo.chapter) {
                        symbol.chapter.process.error(t("compile.chapter_is_missing", symbol.chapter.name), symbol.node);
                        return;
                    }
                });

                symbols.forEach(function (symbol) {
                    if (symbol.referenceTo && !symbol.referenceTo.referenceNode) {
                        var reference = symbol.referenceTo;
                        symbols.forEach(function (symbol) {
                            if (reference.part === symbol.part && reference.chapter === symbol.chapter && reference.targetSymbol === symbol.symbolName && reference.label === symbol.labelName) {
                                reference.referenceNode = symbol.node;
                            }
                        });
                        if (!reference.referenceNode) {
                            symbol.chapter.process.error(t("compile.reference_is_missing", reference.targetSymbol, reference.label), symbol.node);
                            return;
                        }
                    }
                });

                symbols.forEach(function (symbol1) {
                    symbols.forEach(function (symbol2) {
                        if (symbol1 === symbol2) {
                            return;
                        }
                        if (symbol1.chapter === symbol2.chapter && symbol1.symbolName === symbol2.symbolName) {
                            if (symbol1.labelName && symbol2.labelName && symbol1.labelName === symbol2.labelName) {
                                symbol1.chapter.process.error(t("compile.duplicated_label"), symbol1.node, symbol2.node);
                                return;
                            }
                        }
                    });
                });
            };
            return DefaultValidator;
        })();
        Build.DefaultValidator = DefaultValidator;
    })(ReVIEW.Build || (ReVIEW.Build = {}));
    var Build = ReVIEW.Build;
})(ReVIEW || (ReVIEW = {}));
var ReVIEW;
(function (ReVIEW) {
    (function (Build) {
        var i18n = ReVIEW.i18n;

        var SyntaxTree = ReVIEW.Parse.SyntaxTree;
        var NodeSyntaxTree = ReVIEW.Parse.NodeSyntaxTree;
        var BlockElementSyntaxTree = ReVIEW.Parse.BlockElementSyntaxTree;
        var InlineElementSyntaxTree = ReVIEW.Parse.InlineElementSyntaxTree;
        var HeadlineSyntaxTree = ReVIEW.Parse.HeadlineSyntaxTree;
        var TextNodeSyntaxTree = ReVIEW.Parse.TextNodeSyntaxTree;
        var ChapterSyntaxTree = ReVIEW.Parse.ChapterSyntaxTree;

        var nodeContentToString = ReVIEW.nodeContentToString;
        var findChapter = ReVIEW.findChapter;

        var TextBuilder = (function (_super) {
            __extends(TextBuilder, _super);
            function TextBuilder() {
                _super.apply(this, arguments);
            }
            TextBuilder.prototype.chapterPost = function (process, node) {
                process.out("\n");
            };

            TextBuilder.prototype.headlinePre = function (process, name, node) {
                process.out("■H").out(node.level).out("■");
                if (node.level === 1) {
                    var text = i18n.t("builder.chapter", node.parentNode.no);
                    process.out(text).out("　");
                } else if (node.level === 2) {
                    process.out(node.parentNode.toChapter().fqn).out("　");
                }
            };

            TextBuilder.prototype.headlinePost = function (process, name, node) {
                process.out("\n\n");
            };

            TextBuilder.prototype.block_list_pre = function (process, node) {
                process.out("◆→開始:リスト←◆\n");
                var chapter = findChapter(node, 1);
                var text = i18n.t("builder.list", chapter.fqn, node.no);
                process.out(text).out("　").out(node.args[1].arg).out("\n");
                return function (v) {
                    node.childNodes.forEach(function (node) {
                        ReVIEW.visit(node, v);
                    });
                };
            };

            TextBuilder.prototype.block_list_post = function (process, node) {
                process.out("◆→終了:リスト←◆\n");
            };

            TextBuilder.prototype.inline_list = function (process, node) {
                var chapter = findChapter(node, 1);
                var listNode = this.findReference(process, node).referenceTo.referenceNode.toBlockElement();
                var text = i18n.t("builder.list", chapter.fqn, listNode.no);
                process.out(text);
                return false;
            };

            TextBuilder.prototype.inline_hd_pre = function (process, node) {
                process.out("「");
                var chapter = findChapter(node);
                if (chapter.level === 1) {
                    process.out(chapter.fqn).out("章 ");
                } else {
                    process.out(chapter.fqn).out(" ");
                }
                process.out(nodeContentToString(process, chapter.headline));
                return false;
            };

            TextBuilder.prototype.inline_hd_post = function (process, node) {
                process.out("」");
            };

            TextBuilder.prototype.inline_br = function (process, node) {
                process.out("\n");
            };
            return TextBuilder;
        })(Build.DefaultBuilder);
        Build.TextBuilder = TextBuilder;
    })(ReVIEW.Build || (ReVIEW.Build = {}));
    var Build = ReVIEW.Build;
})(ReVIEW || (ReVIEW = {}));
var ReVIEW;
(function (ReVIEW) {
    (function (Build) {
        var i18n = ReVIEW.i18n;

        var SyntaxTree = ReVIEW.Parse.SyntaxTree;
        var NodeSyntaxTree = ReVIEW.Parse.NodeSyntaxTree;
        var BlockElementSyntaxTree = ReVIEW.Parse.BlockElementSyntaxTree;
        var InlineElementSyntaxTree = ReVIEW.Parse.InlineElementSyntaxTree;
        var HeadlineSyntaxTree = ReVIEW.Parse.HeadlineSyntaxTree;
        var TextNodeSyntaxTree = ReVIEW.Parse.TextNodeSyntaxTree;
        var ChapterSyntaxTree = ReVIEW.Parse.ChapterSyntaxTree;

        var nodeContentToString = ReVIEW.nodeContentToString;
        var findChapter = ReVIEW.findChapter;

        var HtmlBuilder = (function (_super) {
            __extends(HtmlBuilder, _super);
            function HtmlBuilder() {
                _super.apply(this, arguments);
            }
            HtmlBuilder.prototype.chapterPost = function (process, node) {
                process.out("<br/>");
            };

            HtmlBuilder.prototype.headlinePre = function (process, name, node) {
                process.out("<h").out(node.level).out(">");
                if (node.level === 1) {
                    var text = i18n.t("builder.chapter", node.parentNode.no);
                    process.out(text).out("　");
                } else if (node.level === 2) {
                    process.out(node.parentNode.toChapter().fqn).out("　");
                }
            };

            HtmlBuilder.prototype.headlinePost = function (process, name, node) {
                process.out("</h").out(node.level).out(">");
            };

            HtmlBuilder.prototype.block_list_pre = function (process, node) {
                process.out("<div style='margin:20px;'>");
                var chapter = findChapter(node, 1);
                var text = i18n.t("builder.list", chapter.fqn, node.no);
                process.out(text).out("　").out(node.args[1].arg).out("\n");
                process.out(text).out("<pre style='padding:20px; border:1px solid #ccc;background-color: #eee;'>");
                return function (v) {
                    node.childNodes.forEach(function (node) {
                        ReVIEW.visit(node, v);
                    });
                };
                process.out(text).out("</pre>");
            };

            HtmlBuilder.prototype.block_list_post = function (process, node) {
                process.out("</div>");
            };

            HtmlBuilder.prototype.inline_list = function (process, node) {
                var chapter = findChapter(node, 1);
                var listNode = this.findReference(process, node).referenceTo.referenceNode.toBlockElement();
                var text = i18n.t("builder.list", chapter.fqn, listNode.no);
                process.out(text);
                return false;
            };

            HtmlBuilder.prototype.inline_hd_pre = function (process, node) {
                process.out("「");
                var chapter = findChapter(node);
                if (chapter.level === 1) {
                    process.out(chapter.fqn).out("章 ");
                } else {
                    process.out(chapter.fqn).out(" ");
                }
                process.out(nodeContentToString(process, chapter.headline));
                return false;
            };

            HtmlBuilder.prototype.inline_hd_post = function (process, node) {
                process.out("」");
            };

            HtmlBuilder.prototype.inline_br = function (process, node) {
                process.out("<br/>");
            };
            return HtmlBuilder;
        })(Build.DefaultBuilder);
        Build.HtmlBuilder = HtmlBuilder;
    })(ReVIEW.Build || (ReVIEW.Build = {}));
    var Build = ReVIEW.Build;
})(ReVIEW || (ReVIEW = {}));
var ReVIEW;
(function (ReVIEW) {
    function start(setup, options) {
        var controller = new ReVIEW.Controller(options);

        setup(controller);
        return controller.process();
    }
    ReVIEW.start = start;
})(ReVIEW || (ReVIEW = {}));

if (ReVIEW.isNodeJS()) {
    module.exports = ReVIEW;
}

if (ReVIEW.isNodeJS()) {
    var program = require("commander");
    program.version("TODO", "-v, --version").option("--reviewfile <file>", "where is ReVIEWconfig.js?").option("--base <path>", "alternative base path");

    program.command("compile <document>").description("compile ReVIEW document").option("--ast", "output JSON format abstract syntax tree").option("-t, --target <target>", "output format of document").action(function (document, options) {
        var ast = options.ast || false;
    });

    program.command("*").action(function (args, options) {
        var reviewfile = program.reviewfile || "./ReVIEWconfig";
        var setup = require(reviewfile);
        ReVIEW.start(setup, {
            reviewfile: reviewfile,
            base: program.base
        });
    });

    var endWith = function (str, target) {
        return str.indexOf(target, str.length - target.length) !== -1;
    };
    if (endWith(process.argv[1], "review.js")) {
        program.parse(process.argv);
    }
}
